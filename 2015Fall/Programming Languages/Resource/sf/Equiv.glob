DIGEST 360ece835f6782a0fd788473f8d8f4df
FEquiv
R54:56 Imp <> <> lib
def 2307:2312 <> aequiv
R2323:2326 Imp <> aexp ind
R2352:2356 Imp <> state def
R2376:2378 Coq.Init.Logic <> :type_scope:x_'='_x not
R2365:2369 Imp <> aeval def
R2374:2375 Equiv <> a1 var
R2371:2372 Equiv <> st var
R2379:2383 Imp <> aeval def
R2388:2389 Equiv <> a2 var
R2385:2386 Equiv <> st var
def 2404:2409 <> bequiv
R2420:2423 Imp <> bexp ind
R2449:2453 Imp <> state def
R2473:2475 Coq.Init.Logic <> :type_scope:x_'='_x not
R2462:2466 Imp <> beval def
R2471:2472 Equiv <> b1 var
R2468:2469 Equiv <> st var
R2476:2480 Imp <> beval def
R2485:2486 Equiv <> b2 var
R2482:2483 Equiv <> st var
def 3149:3154 <> cequiv
R3165:3167 Imp <> com ind
R3199:3203 Imp <> state def
R3212:3212 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3227:3233 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3248:3248 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3215:3217 Imp <> ::x_'/'_x_'||'_x not
R3220:3223 Imp <> ::x_'/'_x_'||'_x not
R3213:3214 Equiv <> c1 var
R3218:3219 Equiv <> st var
R3224:3226 Equiv <> st' var
R3236:3238 Imp <> ::x_'/'_x_'||'_x not
R3241:3244 Imp <> ::x_'/'_x_'||'_x not
R3234:3235 Equiv <> c2 var
R3239:3240 Equiv <> st var
R3245:3247 Equiv <> st' var
def 3825:3830 <> prog_a
R3834:3836 Imp <> com ind
R3843:3848 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3876:3883 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3912:3917 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3849:3852 Imp <> BNot constr
R3855:3857 Imp <> BLe constr
R3868:3871 Imp <> ANum constr
R3860:3862 Imp <> AId constr
R3864:3864 Imp <> X def
R3885:3889 Imp <> ::x_'::='_x not
R3884:3884 Imp <> X def
R3890:3894 Imp <> APlus constr
R3905:3908 Imp <> ANum constr
R3897:3899 Imp <> AId constr
R3901:3901 Imp <> X def
def 3932:3937 <> prog_b
R3941:3943 Imp <> com ind
R4060:4064 Imp <> ::x_';;'_x not
R3950:3953 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R3974:3983 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4031:4042 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4055:4059 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R3954:3956 Imp <> BEq constr
R3967:3970 Imp <> ANum constr
R3959:3961 Imp <> AId constr
R3963:3963 Imp <> X def
R4012:4018 Imp <> ::x_';;'_x not
R3985:3989 Imp <> ::x_'::='_x not
R3984:3984 Imp <> X def
R3990:3994 Imp <> APlus constr
R4005:4008 Imp <> ANum constr
R3997:3999 Imp <> AId constr
R4001:4001 Imp <> X def
R4020:4024 Imp <> ::x_'::='_x not
R4019:4019 Imp <> Y def
R4025:4028 Imp <> ANum constr
R4044:4048 Imp <> ::x_'::='_x not
R4043:4043 Imp <> Y def
R4049:4052 Imp <> ANum constr
R4093:4097 Imp <> ::x_';;'_x not
R4066:4070 Imp <> ::x_'::='_x not
R4065:4065 Imp <> X def
R4071:4076 Imp <> AMinus constr
R4087:4089 Imp <> AId constr
R4091:4091 Imp <> Y def
R4079:4081 Imp <> AId constr
R4083:4083 Imp <> X def
R4099:4103 Imp <> ::x_'::='_x not
R4098:4098 Imp <> Y def
R4104:4107 Imp <> ANum constr
def 4124:4129 <> prog_c
R4133:4135 Imp <> com ind
R4142:4145 Imp <> ::'SKIP' not
def 4160:4165 <> prog_d
R4169:4171 Imp <> com ind
R4178:4183 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4211:4218 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4263:4268 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4184:4187 Imp <> BNot constr
R4190:4192 Imp <> BEq constr
R4203:4206 Imp <> ANum constr
R4195:4197 Imp <> AId constr
R4199:4199 Imp <> X def
R4220:4224 Imp <> ::x_'::='_x not
R4219:4219 Imp <> X def
R4225:4229 Imp <> APlus constr
R4256:4259 Imp <> ANum constr
R4232:4236 Imp <> AMult constr
R4247:4249 Imp <> AId constr
R4251:4251 Imp <> Y def
R4239:4241 Imp <> AId constr
R4243:4243 Imp <> X def
def 4283:4288 <> prog_e
R4292:4294 Imp <> com ind
R4302:4306 Imp <> ::x_'::='_x not
R4301:4301 Imp <> Y def
R4307:4310 Imp <> ANum constr
def 4327:4332 <> prog_f
R4336:4338 Imp <> com ind
R4373:4377 Imp <> ::x_';;'_x not
R4346:4350 Imp <> ::x_'::='_x not
R4345:4345 Imp <> Y def
R4351:4355 Imp <> APlus constr
R4366:4369 Imp <> ANum constr
R4358:4360 Imp <> AId constr
R4362:4362 Imp <> X def
R4378:4383 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4410:4417 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4446:4451 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4384:4387 Imp <> BNot constr
R4390:4392 Imp <> BEq constr
R4403:4405 Imp <> AId constr
R4407:4407 Imp <> Y def
R4395:4397 Imp <> AId constr
R4399:4399 Imp <> X def
R4419:4423 Imp <> ::x_'::='_x not
R4418:4418 Imp <> Y def
R4424:4428 Imp <> APlus constr
R4439:4442 Imp <> ANum constr
R4431:4433 Imp <> AId constr
R4435:4435 Imp <> X def
def 4466:4471 <> prog_g
R4475:4477 Imp <> com ind
R4484:4489 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4495:4502 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4507:4512 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4490:4494 Imp <> BTrue constr
R4503:4506 Imp <> ::'SKIP' not
def 4527:4532 <> prog_h
R4536:4538 Imp <> com ind
R4545:4550 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4577:4584 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4613:4618 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4551:4554 Imp <> BNot constr
R4557:4559 Imp <> BEq constr
R4570:4572 Imp <> AId constr
R4574:4574 Imp <> X def
R4562:4564 Imp <> AId constr
R4566:4566 Imp <> X def
R4586:4590 Imp <> ::x_'::='_x not
R4585:4585 Imp <> X def
R4591:4595 Imp <> APlus constr
R4606:4609 Imp <> ANum constr
R4598:4600 Imp <> AId constr
R4602:4602 Imp <> X def
def 4633:4638 <> prog_i
R4642:4644 Imp <> com ind
R4651:4656 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4683:4690 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4719:4724 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4657:4660 Imp <> BNot constr
R4663:4665 Imp <> BEq constr
R4676:4678 Imp <> AId constr
R4680:4680 Imp <> Y def
R4668:4670 Imp <> AId constr
R4672:4672 Imp <> X def
R4692:4696 Imp <> ::x_'::='_x not
R4691:4691 Imp <> X def
R4697:4701 Imp <> APlus constr
R4712:4715 Imp <> ANum constr
R4704:4706 Imp <> AId constr
R4708:4708 Imp <> Y def
def 4739:4751 <> equiv_classes
R4755:4758 Coq.Init.Datatypes <> list ind
R4761:4764 Coq.Init.Datatypes <> list ind
R4766:4768 Imp <> com ind
R4793:4797 SfLib <> admit prfax
prf 5052:5065 <> aequiv_example
R5070:5075 Equiv <> aequiv def
R5103:5106 Imp <> ANum constr
R5078:5083 Imp <> AMinus constr
R5094:5096 Imp <> AId constr
R5098:5098 Imp <> X def
R5086:5088 Imp <> AId constr
R5090:5090 Imp <> X def
prf 5161:5174 <> bequiv_example
R5179:5184 Equiv <> bequiv def
R5226:5230 Imp <> BTrue constr
R5187:5189 Imp <> BEq constr
R5217:5220 Imp <> ANum constr
R5192:5197 Imp <> AMinus constr
R5208:5210 Imp <> AId constr
R5212:5212 Imp <> X def
R5200:5202 Imp <> AId constr
R5204:5204 Imp <> X def
R5262:5266 Imp <> beval def
R5279:5292 Equiv <> aequiv_example thm
R5279:5292 Equiv <> aequiv_example thm
prf 5452:5460 <> skip_left
R5475:5480 Equiv <> cequiv def
R5505:5505 Equiv <> c var
R5493:5495 Imp <> ::x_';;'_x not
R5489:5492 Imp <> ::'SKIP' not
R5496:5496 Equiv <> c var
R5683:5687 Imp <> E_Seq constr
R5683:5687 Imp <> E_Seq constr
R5708:5713 Imp <> E_Skip constr
R5708:5713 Imp <> E_Skip constr
prf 5879:5888 <> skip_right
R5903:5908 Equiv <> cequiv def
R5931:5931 Equiv <> c var
R5917:5919 Imp <> ::x_';;'_x not
R5916:5916 Equiv <> c var
R5920:5923 Imp <> ::'SKIP' not
R6079:6083 Imp <> E_Seq constr
R6079:6083 Imp <> E_Seq constr
R6114:6119 Imp <> E_Skip constr
R6114:6119 Imp <> E_Skip constr
prf 6234:6248 <> IFB_true_simple
R6267:6272 Equiv <> cequiv def
R6315:6316 Equiv <> c1 var
R6280:6283 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6289:6294 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6297:6302 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6305:6307 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6284:6288 Imp <> BTrue constr
R6295:6296 Equiv <> c1 var
R6303:6304 Equiv <> c2 var
R6449:6456 Imp <> E_IfTrue constr
R6449:6456 Imp <> E_IfTrue constr
prf 8379:8386 <> IFB_true
R8434:8439 Equiv <> cequiv def
R8484:8485 Equiv <> c1 var
R8450:8453 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8455:8460 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8463:8468 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8471:8473 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8454:8454 Equiv <> b var
R8461:8462 Equiv <> c1 var
R8469:8470 Equiv <> c2 var
R8410:8415 Equiv <> bequiv def
R8419:8423 Imp <> BTrue constr
R8417:8417 Equiv <> b var
R8686:8691 Equiv <> bequiv def
R8780:8787 Imp <> E_IfTrue constr
R8780:8787 Imp <> E_IfTrue constr
R8817:8822 Equiv <> bequiv def
prf 8931:8939 <> IFB_false
R8982:8987 Equiv <> cequiv def
R9026:9027 Equiv <> c2 var
R8995:8998 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9000:9005 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9008:9013 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9016:9018 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8999:8999 Equiv <> b var
R9006:9007 Equiv <> c1 var
R9014:9015 Equiv <> c2 var
R8960:8965 Equiv <> bequiv def
R8969:8974 Imp <> BFalse constr
R8967:8967 Equiv <> b var
R9114:9119 Equiv <> bequiv def
R9228:9236 Imp <> E_IfFalse constr
R9228:9236 Imp <> E_IfFalse constr
R9246:9251 Equiv <> bequiv def
prf 9436:9451 <> swap_if_branches
R9472:9477 Equiv <> cequiv def
R9515:9518 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9525:9530 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9533:9538 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9541:9543 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9519:9522 Imp <> BNot constr
R9524:9524 Equiv <> b var
R9531:9532 Equiv <> e2 var
R9539:9540 Equiv <> e1 var
R9484:9487 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9489:9494 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9497:9502 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9505:9507 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9488:9488 Equiv <> b var
R9495:9496 Equiv <> e1 var
R9503:9504 Equiv <> e2 var
R9625:9633 Imp <> E_IfFalse constr
R9625:9633 Imp <> E_IfFalse constr
R9688:9695 Imp <> E_IfTrue constr
R9688:9695 Imp <> E_IfTrue constr
R9797:9805 Imp <> E_IfFalse constr
R9797:9805 Imp <> E_IfFalse constr
R9827:9839 Coq.Bool.Bool <> negb_true_iff thm
R9827:9839 Coq.Bool.Bool <> negb_true_iff thm
R9878:9885 Imp <> E_IfTrue constr
R9878:9885 Imp <> E_IfTrue constr
R9914:9927 Coq.Bool.Bool <> negb_false_iff thm
R9914:9927 Coq.Bool.Bool <> negb_false_iff thm
prf 10302:10312 <> WHILE_false
R10357:10362 Equiv <> cequiv def
R10397:10400 Imp <> ::'SKIP' not
R10372:10377 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10379:10382 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10384:10387 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10378:10378 Equiv <> b var
R10383:10383 Equiv <> c var
R10333:10338 Equiv <> bequiv def
R10342:10347 Imp <> BFalse constr
R10340:10340 Equiv <> b var
R10518:10523 Imp <> E_Skip constr
R10518:10523 Imp <> E_Skip constr
R10636:10645 Imp <> E_WhileEnd constr
R10636:10645 Imp <> E_WhileEnd constr
prf 11986:12003 <> WHILE_true_nonterm
R12054:12056 Coq.Init.Logic <> :type_scope:'~'_x not
R12087:12088 Coq.Init.Logic <> :type_scope:'~'_x not
R12057:12057 Imp <> ::x_'/'_x_'||'_x not
R12074:12077 Imp <> ::x_'/'_x_'||'_x not
R12080:12083 Imp <> ::x_'/'_x_'||'_x not
R12058:12063 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12065:12068 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12070:12073 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12064:12064 Equiv <> b var
R12069:12069 Equiv <> c var
R12078:12079 Equiv <> st var
R12084:12086 Equiv <> st' var
R12031:12036 Equiv <> bequiv def
R12040:12044 Imp <> BTrue constr
R12038:12038 Equiv <> b var
R12171:12176 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12178:12181 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12183:12186 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12171:12176 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12178:12181 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12183:12186 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12498:12503 Equiv <> bequiv def
prf 13020:13029 <> WHILE_true
R13073:13078 Equiv <> cequiv def
R13115:13120 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13126:13129 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13134:13137 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13121:13125 Imp <> BTrue constr
R13130:13133 Imp <> ::'SKIP' not
R13089:13094 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13096:13099 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13101:13104 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13095:13095 Equiv <> b var
R13100:13100 Equiv <> c var
R13049:13054 Equiv <> bequiv def
R13058:13062 Imp <> BTrue constr
R13056:13056 Equiv <> b var
R13182:13199 Equiv <> WHILE_true_nonterm thm
R13182:13199 Equiv <> WHILE_true_nonterm thm
R13241:13258 Equiv <> WHILE_true_nonterm thm
R13241:13258 Equiv <> WHILE_true_nonterm thm
R13290:13295 Equiv <> bequiv def
prf 13335:13348 <> loop_unrolling
R13365:13370 Equiv <> cequiv def
R13400:13403 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13405:13411 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13432:13438 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13443:13445 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13404:13404 Equiv <> b var
R13413:13415 Imp <> ::x_';;'_x not
R13412:13412 Equiv <> c var
R13416:13421 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13423:13426 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13428:13431 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13422:13422 Equiv <> b var
R13427:13427 Equiv <> c var
R13439:13442 Imp <> ::'SKIP' not
R13377:13382 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13384:13387 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13389:13392 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13383:13383 Equiv <> b var
R13388:13388 Equiv <> c var
R13531:13539 Imp <> E_IfFalse constr
R13531:13539 Imp <> E_IfFalse constr
R13558:13563 Imp <> E_Skip constr
R13558:13563 Imp <> E_Skip constr
R13574:13581 Imp <> E_IfTrue constr
R13574:13581 Imp <> E_IfTrue constr
R13600:13604 Imp <> E_Seq constr
R13600:13604 Imp <> E_Seq constr
R13697:13707 Imp <> E_WhileLoop constr
R13697:13707 Imp <> E_WhileLoop constr
R13787:13796 Imp <> E_WhileEnd constr
R13787:13796 Imp <> E_WhileEnd constr
prf 14491:14499 <> seq_assoc
R14522:14527 Equiv <> cequiv def
R14547:14549 Imp <> ::x_';;'_x not
R14556:14556 Imp <> ::x_';;'_x not
R14545:14546 Equiv <> c1 var
R14552:14553 Imp <> ::x_';;'_x not
R14550:14551 Equiv <> c2 var
R14554:14555 Equiv <> c3 var
R14530:14530 Imp <> ::x_';;'_x not
R14537:14539 Imp <> ::x_';;'_x not
R14533:14534 Imp <> ::x_';;'_x not
R14531:14532 Equiv <> c1 var
R14535:14536 Equiv <> c2 var
R14540:14541 Equiv <> c3 var
R14650:14654 Imp <> E_Seq constr
R14650:14654 Imp <> E_Seq constr
R14696:14700 Imp <> E_Seq constr
R14696:14700 Imp <> E_Seq constr
R14797:14801 Imp <> E_Seq constr
R14797:14801 Imp <> E_Seq constr
R14831:14835 Imp <> E_Seq constr
R14831:14835 Imp <> E_Seq constr
prf 15211:15239 <> identity_assignment_first_try
R15253:15254 SfLib <> id ind
R15260:15265 Equiv <> cequiv def
R15281:15284 Imp <> ::'SKIP' not
R15269:15273 Imp <> ::x_'::='_x not
R15268:15268 Equiv <> X var
R15274:15276 Imp <> AId constr
R15278:15278 Equiv <> X var
R15390:15395 Imp <> update def
R15390:15395 Imp <> update def
ax 17429:17453 <> functional_extensionality
R17488:17488 Equiv <> Y var
R17483:17483 Equiv <> X var
R17528:17530 Coq.Init.Logic <> :type_scope:x_'='_x not
R17527:17527 Equiv <> f var
R17531:17531 Equiv <> g var
R17508:17508 Equiv <> X var
R17515:17517 Coq.Init.Logic <> :type_scope:x_'='_x not
R17512:17512 Equiv <> f var
R17514:17514 Equiv <> x var
R17518:17518 Equiv <> g var
R17520:17520 Equiv <> x var
prf 17814:17832 <> identity_assignment
R17846:17847 SfLib <> id ind
R17853:17858 Equiv <> cequiv def
R17882:17885 Imp <> ::'SKIP' not
R17866:17870 Imp <> ::x_'::='_x not
R17865:17865 Equiv <> X var
R17871:17873 Imp <> AId constr
R17875:17875 Equiv <> X var
R17990:17995 Imp <> update def
R17990:17995 Imp <> update def
R18055:18079 Equiv <> functional_extensionality prfax
R18055:18079 Equiv <> functional_extensionality prfax
R18105:18115 Imp <> update_same thm
R18105:18115 Imp <> update_same thm
R18195:18198 Coq.Init.Logic <> :type_scope:x_'='_x not
R18219:18219 Coq.Init.Logic <> :type_scope:x_'='_x not
R18199:18204 Imp <> update def
R18195:18198 Coq.Init.Logic <> :type_scope:x_'='_x not
R18219:18219 Coq.Init.Logic <> :type_scope:x_'='_x not
R18199:18204 Imp <> update def
R18239:18263 Equiv <> functional_extensionality prfax
R18239:18263 Equiv <> functional_extensionality prfax
R18292:18302 Imp <> update_same thm
R18292:18302 Imp <> update_same thm
prf 18437:18449 <> assign_aequiv
R18490:18495 Equiv <> cequiv def
R18504:18508 Imp <> ::x_'::='_x not
R18503:18503 Equiv <> X var
R18509:18509 Equiv <> e var
R18497:18500 Imp <> ::'SKIP' not
R18467:18472 Equiv <> aequiv def
R18482:18482 Equiv <> e var
R18475:18477 Imp <> AId constr
R18479:18479 Equiv <> X var
R18579:18581 Coq.Init.Logic <> :type_scope:x_'='_x not
R18582:18587 Imp <> update def
R18596:18600 Imp <> aeval def
R18579:18581 Coq.Init.Logic <> :type_scope:x_'='_x not
R18582:18587 Imp <> update def
R18596:18600 Imp <> aeval def
R18619:18643 Equiv <> functional_extensionality prfax
R18619:18643 Equiv <> functional_extensionality prfax
R18663:18673 Imp <> update_same thm
R18663:18673 Imp <> update_same thm
R18723:18727 Imp <> E_Ass constr
R18723:18727 Imp <> E_Ass constr
R18755:18757 Coq.Init.Logic <> :type_scope:x_'='_x not
R18758:18763 Imp <> update def
R18771:18775 Imp <> aeval def
R18755:18757 Coq.Init.Logic <> :type_scope:x_'='_x not
R18758:18763 Imp <> update def
R18771:18775 Imp <> aeval def
R18793:18817 Equiv <> functional_extensionality prfax
R18793:18817 Equiv <> functional_extensionality prfax
R18836:18846 Imp <> update_same thm
R18836:18846 Imp <> update_same thm
R18896:18901 Imp <> E_Skip constr
R18896:18901 Imp <> E_Skip constr
prf 19455:19465 <> refl_aequiv
R19481:19484 Imp <> aexp ind
R19488:19493 Equiv <> aequiv def
R19497:19497 Equiv <> a var
R19495:19495 Equiv <> a var
prf 19548:19557 <> sym_aequiv
R19577:19580 Imp <> aexp ind
R19603:19608 Equiv <> aequiv def
R19613:19614 Equiv <> a1 var
R19610:19611 Equiv <> a2 var
R19587:19592 Equiv <> aequiv def
R19597:19598 Equiv <> a2 var
R19594:19595 Equiv <> a1 var
prf 19685:19696 <> trans_aequiv
R19719:19722 Imp <> aexp ind
R19761:19766 Equiv <> aequiv def
R19771:19772 Equiv <> a3 var
R19768:19769 Equiv <> a1 var
R19745:19750 Equiv <> aequiv def
R19755:19756 Equiv <> a3 var
R19752:19753 Equiv <> a2 var
R19729:19734 Equiv <> aequiv def
R19739:19740 Equiv <> a2 var
R19736:19737 Equiv <> a1 var
R19792:19797 Equiv <> aequiv def
prf 19892:19902 <> refl_bequiv
R19918:19921 Imp <> bexp ind
R19925:19930 Equiv <> bequiv def
R19934:19934 Equiv <> b var
R19932:19932 Equiv <> b var
R19953:19958 Equiv <> bequiv def
prf 20000:20009 <> sym_bequiv
R20029:20032 Imp <> bexp ind
R20055:20060 Equiv <> bequiv def
R20065:20066 Equiv <> b1 var
R20062:20063 Equiv <> b2 var
R20039:20044 Equiv <> bequiv def
R20049:20050 Equiv <> b2 var
R20046:20047 Equiv <> b1 var
R20085:20090 Equiv <> bequiv def
prf 20152:20163 <> trans_bequiv
R20186:20189 Imp <> bexp ind
R20228:20233 Equiv <> bequiv def
R20238:20239 Equiv <> b3 var
R20235:20236 Equiv <> b1 var
R20212:20217 Equiv <> bequiv def
R20222:20223 Equiv <> b3 var
R20219:20220 Equiv <> b2 var
R20196:20201 Equiv <> bequiv def
R20206:20207 Equiv <> b2 var
R20203:20204 Equiv <> b1 var
R20259:20264 Equiv <> bequiv def
prf 20359:20369 <> refl_cequiv
R20385:20387 Imp <> com ind
R20391:20396 Equiv <> cequiv def
R20400:20400 Equiv <> c var
R20398:20398 Equiv <> c var
R20419:20424 Equiv <> cequiv def
R20450:20457 Coq.Init.Logic <> iff_refl thm
R20450:20457 Coq.Init.Logic <> iff_refl thm
prf 20473:20482 <> sym_cequiv
R20502:20504 Imp <> com ind
R20527:20532 Equiv <> cequiv def
R20537:20538 Equiv <> c1 var
R20534:20535 Equiv <> c2 var
R20511:20516 Equiv <> cequiv def
R20521:20522 Equiv <> c2 var
R20518:20519 Equiv <> c1 var
R20557:20562 Equiv <> cequiv def
R20612:20616 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R20600:20602 Imp <> ::x_'/'_x_'||'_x not
R20605:20608 Imp <> ::x_'/'_x_'||'_x not
R20619:20621 Imp <> ::x_'/'_x_'||'_x not
R20624:20627 Imp <> ::x_'/'_x_'||'_x not
R20612:20616 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R20600:20602 Imp <> ::x_'/'_x_'||'_x not
R20605:20608 Imp <> ::x_'/'_x_'||'_x not
R20619:20621 Imp <> ::x_'/'_x_'||'_x not
R20624:20627 Imp <> ::x_'/'_x_'||'_x not
R20690:20696 Coq.Init.Logic <> iff_sym thm
R20690:20696 Coq.Init.Logic <> iff_sym thm
prf 20723:20731 <> iff_trans
R20797:20801 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R20795:20796 Equiv <> P1 var
R20802:20803 Equiv <> P3 var
R20782:20786 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R20780:20781 Equiv <> P2 var
R20787:20788 Equiv <> P3 var
R20767:20771 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R20765:20766 Equiv <> P1 var
R20772:20773 Equiv <> P2 var
prf 20971:20982 <> trans_cequiv
R21005:21007 Imp <> com ind
R21046:21051 Equiv <> cequiv def
R21056:21057 Equiv <> c3 var
R21053:21054 Equiv <> c1 var
R21030:21035 Equiv <> cequiv def
R21040:21041 Equiv <> c3 var
R21037:21038 Equiv <> c2 var
R21014:21019 Equiv <> cequiv def
R21024:21025 Equiv <> c2 var
R21021:21022 Equiv <> c1 var
R21077:21082 Equiv <> cequiv def
R21143:21145 Imp <> ::x_'/'_x_'||'_x not
R21148:21151 Imp <> ::x_'/'_x_'||'_x not
R21125:21133 Equiv <> iff_trans thm
R21143:21145 Imp <> ::x_'/'_x_'||'_x not
R21148:21151 Imp <> ::x_'/'_x_'||'_x not
R21125:21133 Equiv <> iff_trans thm
prf 22510:22524 <> CAss_congruence
R22566:22571 Equiv <> cequiv def
R22586:22589 Imp <> CAss constr
R22593:22595 Equiv <> a1' var
R22591:22591 Equiv <> i var
R22574:22577 Imp <> CAss constr
R22581:22582 Equiv <> a1 var
R22579:22579 Equiv <> i var
R22547:22552 Equiv <> aequiv def
R22557:22559 Equiv <> a1' var
R22554:22555 Equiv <> a1 var
R22708:22712 Imp <> E_Ass constr
R22708:22712 Imp <> E_Ass constr
R22795:22799 Imp <> E_Ass constr
R22795:22799 Imp <> E_Ass constr
prf 24653:24669 <> CWhile_congruence
R24733:24738 Equiv <> cequiv def
R24762:24767 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24771:24774 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24778:24781 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24768:24770 Equiv <> b1' var
R24775:24777 Equiv <> c1' var
R24741:24746 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24749:24752 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24755:24758 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24747:24748 Equiv <> b1 var
R24753:24754 Equiv <> c1 var
R24714:24719 Equiv <> cequiv def
R24724:24726 Equiv <> c1' var
R24721:24722 Equiv <> c1 var
R24697:24702 Equiv <> bequiv def
R24707:24709 Equiv <> b1' var
R24704:24705 Equiv <> b1 var
R24825:24830 Equiv <> bequiv def
R24832:24837 Equiv <> cequiv def
R24929:24934 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24937:24940 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24943:24946 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24929:24934 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24937:24940 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24943:24946 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R25057:25066 Imp <> E_WhileEnd constr
R25057:25066 Imp <> E_WhileEnd constr
R25132:25142 Imp <> E_WhileLoop constr
R25132:25142 Imp <> E_WhileLoop constr
R25399:25404 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R25408:25411 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R25415:25418 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R25399:25404 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R25408:25411 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R25415:25418 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R25532:25541 Imp <> E_WhileEnd constr
R25532:25541 Imp <> E_WhileEnd constr
R25607:25617 Imp <> E_WhileLoop constr
R25607:25617 Imp <> E_WhileLoop constr
prf 25921:25935 <> CSeq_congruence
R25999:26004 Equiv <> cequiv def
R26019:26020 Imp <> ::x_';;'_x not
R26016:26018 Equiv <> c1' var
R26021:26023 Equiv <> c2' var
R26009:26010 Imp <> ::x_';;'_x not
R26007:26008 Equiv <> c1 var
R26011:26012 Equiv <> c2 var
R25980:25985 Equiv <> cequiv def
R25990:25992 Equiv <> c2' var
R25987:25988 Equiv <> c2 var
R25963:25968 Equiv <> cequiv def
R25973:25975 Equiv <> c1' var
R25970:25971 Equiv <> c1 var
R26095:26099 Imp <> E_Seq constr
R26095:26099 Imp <> E_Seq constr
R26197:26201 Imp <> E_Seq constr
R26197:26201 Imp <> E_Seq constr
prf 26342:26355 <> CIf_congruence
R26439:26444 Equiv <> cequiv def
R26474:26477 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26480:26485 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26489:26494 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26498:26500 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26478:26479 Equiv <> b' var
R26486:26488 Equiv <> c1' var
R26495:26497 Equiv <> c2' var
R26447:26450 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26452:26457 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26460:26465 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26468:26470 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26451:26451 Equiv <> b var
R26458:26459 Equiv <> c1 var
R26466:26467 Equiv <> c2 var
R26420:26425 Equiv <> cequiv def
R26430:26432 Equiv <> c2' var
R26427:26428 Equiv <> c2 var
R26403:26408 Equiv <> cequiv def
R26413:26415 Equiv <> c1' var
R26410:26411 Equiv <> c1 var
R26388:26393 Equiv <> bequiv def
R26397:26398 Equiv <> b' var
R26395:26395 Equiv <> b var
R26572:26579 Imp <> E_IfTrue constr
R26572:26579 Imp <> E_IfTrue constr
R26589:26594 Equiv <> bequiv def
R26663:26671 Imp <> E_IfFalse constr
R26663:26671 Imp <> E_IfFalse constr
R26681:26686 Equiv <> bequiv def
R26755:26762 Imp <> E_IfTrue constr
R26755:26762 Imp <> E_IfTrue constr
R26772:26777 Equiv <> bequiv def
R26849:26857 Imp <> E_IfFalse constr
R26849:26857 Imp <> E_IfFalse constr
R26867:26872 Equiv <> bequiv def
def 27066:27083 <> congruence_example
R27088:27093 Equiv <> cequiv def
R27276:27283 Imp <> ::x_';;'_x not
R27265:27269 Imp <> ::x_'::='_x not
R27264:27264 Imp <> X def
R27270:27273 Imp <> ANum constr
R27284:27288 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27309:27327 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27356:27399 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27413:27420 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27289:27291 Imp <> BEq constr
R27302:27305 Imp <> ANum constr
R27294:27296 Imp <> AId constr
R27298:27298 Imp <> X def
R27329:27333 Imp <> ::x_'::='_x not
R27328:27328 Imp <> Y def
R27334:27339 Imp <> AMinus constr
R27350:27352 Imp <> AId constr
R27354:27354 Imp <> X def
R27342:27344 Imp <> AId constr
R27346:27346 Imp <> X def
R27401:27405 Imp <> ::x_'::='_x not
R27400:27400 Imp <> Y def
R27406:27409 Imp <> ANum constr
R27133:27140 Imp <> ::x_';;'_x not
R27122:27126 Imp <> ::x_'::='_x not
R27121:27121 Imp <> X def
R27127:27130 Imp <> ANum constr
R27141:27145 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27166:27184 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27197:27214 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27228:27235 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27146:27148 Imp <> BEq constr
R27159:27162 Imp <> ANum constr
R27151:27153 Imp <> AId constr
R27155:27155 Imp <> X def
R27186:27190 Imp <> ::x_'::='_x not
R27185:27185 Imp <> Y def
R27191:27194 Imp <> ANum constr
R27216:27220 Imp <> ::x_'::='_x not
R27215:27215 Imp <> Y def
R27221:27224 Imp <> ANum constr
R27439:27453 Equiv <> CSeq_congruence thm
R27439:27453 Equiv <> CSeq_congruence thm
R27467:27477 Equiv <> refl_cequiv thm
R27467:27477 Equiv <> refl_cequiv thm
R27491:27504 Equiv <> CIf_congruence thm
R27491:27504 Equiv <> CIf_congruence thm
R27519:27529 Equiv <> refl_bequiv thm
R27519:27529 Equiv <> refl_bequiv thm
R27544:27558 Equiv <> CAss_congruence thm
R27544:27558 Equiv <> CAss_congruence thm
R27568:27573 Equiv <> aequiv def
R27608:27617 Coq.Arith.Minus <> minus_diag thm
R27608:27617 Coq.Arith.Minus <> minus_diag thm
R27632:27642 Equiv <> refl_cequiv thm
R27632:27642 Equiv <> refl_cequiv thm
def 28206:28217 <> atrans_sound
R28237:28240 Imp <> aexp ind
R28229:28232 Imp <> aexp ind
R28267:28270 Imp <> aexp ind
R28278:28283 Equiv <> aequiv def
R28288:28293 Equiv <> atrans var
R28295:28295 Equiv <> a var
R28285:28285 Equiv <> a var
def 28311:28322 <> btrans_sound
R28342:28345 Imp <> bexp ind
R28334:28337 Imp <> bexp ind
R28372:28375 Imp <> bexp ind
R28383:28388 Equiv <> bequiv def
R28393:28398 Equiv <> btrans var
R28400:28400 Equiv <> b var
R28390:28390 Equiv <> b var
def 28416:28427 <> ctrans_sound
R28446:28448 Imp <> com ind
R28439:28441 Imp <> com ind
R28475:28477 Imp <> com ind
R28485:28490 Equiv <> cequiv def
R28495:28500 Equiv <> ctrans var
R28502:28502 Equiv <> c var
R28492:28492 Equiv <> c var
def 28820:28838 <> fold_constants_aexp
R28845:28848 Imp <> aexp ind
R28853:28856 Imp <> aexp ind
R28869:28869 Equiv <> a var
R28880:28883 Imp <> ANum constr
R28896:28899 Imp <> ANum constr
R28907:28909 Imp <> AId constr
R28923:28925 Imp <> AId constr
R28933:28937 Imp <> APlus constr
R28962:28962 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28985:28986 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29009:29009 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28963:28981 Equiv <> fold_constants_aexp def
R28987:29005 Equiv <> fold_constants_aexp def
R29024:29024 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29032:29033 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29041:29041 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29025:29028 Imp <> ANum constr
R29034:29037 Imp <> ANum constr
R29046:29049 Imp <> ANum constr
R29054:29056 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R29069:29069 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29073:29074 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29078:29078 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29083:29087 Imp <> APlus constr
R29111:29116 Imp <> AMinus constr
R29140:29140 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29163:29164 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29187:29187 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29141:29159 Equiv <> fold_constants_aexp def
R29165:29183 Equiv <> fold_constants_aexp def
R29202:29202 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29210:29211 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29219:29219 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29203:29206 Imp <> ANum constr
R29212:29215 Imp <> ANum constr
R29224:29227 Imp <> ANum constr
R29232:29234 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R29247:29247 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29251:29252 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29256:29256 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29261:29266 Imp <> AMinus constr
R29290:29294 Imp <> AMult constr
R29319:29319 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29342:29343 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29366:29366 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29320:29338 Equiv <> fold_constants_aexp def
R29344:29362 Equiv <> fold_constants_aexp def
R29381:29381 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29389:29390 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29398:29398 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29382:29385 Imp <> ANum constr
R29391:29394 Imp <> ANum constr
R29403:29406 Imp <> ANum constr
R29411:29413 Coq.Init.Peano <> :nat_scope:x_'*'_x not
R29426:29426 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29430:29431 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29435:29435 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29440:29444 Imp <> AMult constr
def 29480:29492 <> fold_aexp_ex1
R29568:29573 Coq.Init.Logic <> :type_scope:x_'='_x not
R29500:29518 Equiv <> fold_constants_aexp def
R29528:29532 Imp <> AMult constr
R29561:29563 Imp <> AId constr
R29565:29565 Imp <> X def
R29535:29539 Imp <> APlus constr
R29551:29554 Imp <> ANum constr
R29542:29545 Imp <> ANum constr
R29574:29578 Imp <> AMult constr
R29590:29592 Imp <> AId constr
R29594:29594 Imp <> X def
R29581:29584 Imp <> ANum constr
def 29937:29949 <> fold_aexp_ex2
R30042:30046 Coq.Init.Logic <> :type_scope:x_'='_x not
R29957:29975 Equiv <> fold_constants_aexp def
R29985:29990 Imp <> AMinus constr
R30001:30005 Imp <> APlus constr
R30034:30036 Imp <> AId constr
R30038:30038 Imp <> Y def
R30008:30012 Imp <> AMult constr
R30024:30027 Imp <> ANum constr
R30015:30018 Imp <> ANum constr
R29993:29995 Imp <> AId constr
R29997:29997 Imp <> X def
R30047:30052 Imp <> AMinus constr
R30063:30067 Imp <> APlus constr
R30079:30081 Imp <> AId constr
R30083:30083 Imp <> Y def
R30070:30073 Imp <> ANum constr
R30055:30057 Imp <> AId constr
R30059:30059 Imp <> X def
def 30310:30328 <> fold_constants_bexp
R30335:30338 Imp <> bexp ind
R30343:30346 Imp <> bexp ind
R30359:30359 Equiv <> b var
R30370:30374 Imp <> BTrue constr
R30386:30390 Imp <> BTrue constr
R30396:30401 Imp <> BFalse constr
R30412:30417 Imp <> BFalse constr
R30423:30425 Imp <> BEq constr
R30450:30450 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30473:30474 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30497:30497 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30451:30469 Equiv <> fold_constants_aexp def
R30475:30493 Equiv <> fold_constants_aexp def
R30512:30512 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30520:30521 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30529:30529 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30513:30516 Imp <> ANum constr
R30522:30525 Imp <> ANum constr
R30537:30543 Coq.Arith.EqNat <> beq_nat def
R30567:30572 Imp <> BFalse constr
R30556:30560 Imp <> BTrue constr
R30582:30582 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30586:30587 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30591:30591 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30596:30598 Imp <> BEq constr
R30622:30624 Imp <> BLe constr
R30649:30649 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30672:30673 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30696:30696 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30650:30668 Equiv <> fold_constants_aexp def
R30674:30692 Equiv <> fold_constants_aexp def
R30711:30711 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30719:30720 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30728:30728 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30712:30715 Imp <> ANum constr
R30721:30724 Imp <> ANum constr
R30736:30742 SfLib <> ble_nat def
R30766:30771 Imp <> BFalse constr
R30755:30759 Imp <> BTrue constr
R30781:30781 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30785:30786 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30790:30790 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30795:30797 Imp <> BLe constr
R30821:30824 Imp <> BNot constr
R30847:30865 Equiv <> fold_constants_bexp def
R30884:30888 Imp <> BTrue constr
R30893:30898 Imp <> BFalse constr
R30908:30913 Imp <> BFalse constr
R30918:30922 Imp <> BTrue constr
R30939:30942 Imp <> BNot constr
R30962:30965 Imp <> BAnd constr
R30990:30990 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31013:31014 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31037:31037 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30991:31009 Equiv <> fold_constants_bexp def
R31015:31033 Equiv <> fold_constants_bexp def
R31052:31052 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31058:31059 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31065:31065 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31053:31057 Imp <> BTrue constr
R31060:31064 Imp <> BTrue constr
R31070:31074 Imp <> BTrue constr
R31084:31084 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31090:31091 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31098:31098 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31085:31089 Imp <> BTrue constr
R31092:31097 Imp <> BFalse constr
R31103:31108 Imp <> BFalse constr
R31118:31118 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31125:31126 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31132:31132 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31119:31124 Imp <> BFalse constr
R31127:31131 Imp <> BTrue constr
R31137:31142 Imp <> BFalse constr
R31152:31152 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31159:31160 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31167:31167 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31153:31158 Imp <> BFalse constr
R31161:31166 Imp <> BFalse constr
R31172:31177 Imp <> BFalse constr
R31187:31187 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31191:31192 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31196:31196 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31201:31204 Imp <> BAnd constr
def 31240:31252 <> fold_bexp_ex1
R31319:31323 Coq.Init.Logic <> :type_scope:x_'='_x not
R31260:31278 Equiv <> fold_constants_bexp def
R31281:31284 Imp <> BAnd constr
R31293:31296 Imp <> BNot constr
R31299:31302 Imp <> BAnd constr
R31311:31315 Imp <> BTrue constr
R31304:31309 Imp <> BFalse constr
R31286:31290 Imp <> BTrue constr
R31324:31328 Imp <> BTrue constr
def 31365:31377 <> fold_bexp_ex2
R31530:31534 Coq.Init.Logic <> :type_scope:x_'='_x not
R31385:31403 Equiv <> fold_constants_bexp def
R31413:31416 Imp <> BAnd constr
R31454:31456 Imp <> BEq constr
R31486:31491 Imp <> AMinus constr
R31503:31507 Imp <> APlus constr
R31519:31522 Imp <> ANum constr
R31510:31513 Imp <> ANum constr
R31494:31497 Imp <> ANum constr
R31459:31462 Imp <> ANum constr
R31419:31421 Imp <> BEq constr
R31432:31434 Imp <> AId constr
R31436:31436 Imp <> Y def
R31424:31426 Imp <> AId constr
R31428:31428 Imp <> X def
R31535:31538 Imp <> BAnd constr
R31562:31566 Imp <> BTrue constr
R31541:31543 Imp <> BEq constr
R31554:31556 Imp <> AId constr
R31558:31558 Imp <> Y def
R31546:31548 Imp <> AId constr
R31550:31550 Imp <> X def
def 31731:31748 <> fold_constants_com
R31755:31757 Imp <> com ind
R31762:31764 Imp <> com ind
R31777:31777 Equiv <> c var
R31788:31791 Imp <> ::'SKIP' not
R31808:31811 Imp <> ::'SKIP' not
R31818:31822 Imp <> ::x_'::='_x not
R31836:31839 Imp <> CAss constr
R31844:31862 Equiv <> fold_constants_aexp def
R31873:31876 Imp <> ::x_';;'_x not
R31891:31891 Imp <> ::x_';;'_x not
R31913:31918 Imp <> ::x_';;'_x not
R31940:31940 Imp <> ::x_';;'_x not
R31892:31909 Equiv <> fold_constants_com def
R31919:31936 Equiv <> fold_constants_com def
R31946:31949 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31951:31956 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31959:31964 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31967:31969 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31987:32005 Equiv <> fold_constants_bexp def
R32022:32026 Imp <> BTrue constr
R32031:32048 Equiv <> fold_constants_com def
R32061:32066 Imp <> BFalse constr
R32071:32088 Equiv <> fold_constants_com def
R32107:32110 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32113:32118 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32140:32167 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32189:32191 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32119:32136 Equiv <> fold_constants_com def
R32168:32185 Equiv <> fold_constants_com def
R32207:32212 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32214:32217 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32219:32222 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32240:32258 Equiv <> fold_constants_bexp def
R32275:32279 Imp <> BTrue constr
R32284:32289 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32295:32298 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32303:32306 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32290:32294 Imp <> BTrue constr
R32299:32302 Imp <> ::'SKIP' not
R32316:32321 Imp <> BFalse constr
R32326:32329 Imp <> ::'SKIP' not
R32345:32350 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32353:32357 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32378:32382 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32358:32375 Equiv <> fold_constants_com def
R32377:32377 Equiv <> c var
def 32421:32432 <> fold_com_ex1
R32888:32928 Coq.Init.Logic <> :type_scope:x_'='_x not
R33190:33190 Coq.Init.Logic <> :type_scope:x_'='_x not
R32438:32455 Equiv <> fold_constants_com def
R32520:32527 Imp <> ::x_';;'_x not
R32492:32496 Imp <> ::x_'::='_x not
R32491:32491 Imp <> X def
R32497:32501 Imp <> APlus constr
R32513:32516 Imp <> ANum constr
R32504:32507 Imp <> ANum constr
R32557:32564 Imp <> ::x_';;'_x not
R32529:32533 Imp <> ::x_'::='_x not
R32528:32528 Imp <> Y def
R32534:32539 Imp <> AMinus constr
R32550:32553 Imp <> ANum constr
R32542:32544 Imp <> AId constr
R32546:32546 Imp <> X def
R32679:32686 Imp <> ::x_';;'_x not
R32565:32568 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32623:32635 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32640:32658 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32671:32678 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32569:32571 Imp <> BEq constr
R32599:32603 Imp <> APlus constr
R32615:32618 Imp <> ANum constr
R32606:32609 Imp <> ANum constr
R32574:32579 Imp <> AMinus constr
R32590:32592 Imp <> AId constr
R32594:32594 Imp <> Y def
R32582:32584 Imp <> AId constr
R32586:32586 Imp <> X def
R32636:32639 Imp <> ::'SKIP' not
R32660:32664 Imp <> ::x_'::='_x not
R32659:32659 Imp <> Y def
R32665:32668 Imp <> ANum constr
R32803:32810 Imp <> ::x_';;'_x not
R32687:32690 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32747:32759 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32772:32789 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32794:32802 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32691:32693 Imp <> BLe constr
R32705:32710 Imp <> AMinus constr
R32722:32726 Imp <> APlus constr
R32738:32741 Imp <> ANum constr
R32729:32732 Imp <> ANum constr
R32713:32716 Imp <> ANum constr
R32696:32699 Imp <> ANum constr
R32761:32765 Imp <> ::x_'::='_x not
R32760:32760 Imp <> Y def
R32766:32769 Imp <> ANum constr
R32790:32793 Imp <> ::'SKIP' not
R32811:32816 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32837:32848 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32877:32886 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32817:32819 Imp <> BEq constr
R32830:32833 Imp <> ANum constr
R32822:32824 Imp <> AId constr
R32826:32826 Imp <> Y def
R32850:32854 Imp <> ::x_'::='_x not
R32849:32849 Imp <> X def
R32855:32859 Imp <> APlus constr
R32870:32873 Imp <> ANum constr
R32862:32864 Imp <> AId constr
R32866:32866 Imp <> X def
R32941:32948 Imp <> ::x_';;'_x not
R32930:32934 Imp <> ::x_'::='_x not
R32929:32929 Imp <> X def
R32935:32938 Imp <> ANum constr
R32978:32985 Imp <> ::x_';;'_x not
R32950:32954 Imp <> ::x_'::='_x not
R32949:32949 Imp <> Y def
R32955:32960 Imp <> AMinus constr
R32971:32974 Imp <> ANum constr
R32963:32965 Imp <> AId constr
R32967:32967 Imp <> X def
R33086:33093 Imp <> ::x_';;'_x not
R32986:32989 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R33027:33039 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R33044:33063 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R33076:33085 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32990:32992 Imp <> BEq constr
R33020:33023 Imp <> ANum constr
R32995:33000 Imp <> AMinus constr
R33011:33013 Imp <> AId constr
R33015:33015 Imp <> Y def
R33003:33005 Imp <> AId constr
R33007:33007 Imp <> X def
R33040:33043 Imp <> ::'SKIP' not
R33065:33069 Imp <> ::x_'::='_x not
R33064:33064 Imp <> Y def
R33070:33073 Imp <> ANum constr
R33106:33113 Imp <> ::x_';;'_x not
R33095:33099 Imp <> ::x_'::='_x not
R33094:33094 Imp <> Y def
R33100:33103 Imp <> ANum constr
R33114:33119 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R33140:33151 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R33180:33189 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R33120:33122 Imp <> BEq constr
R33133:33136 Imp <> ANum constr
R33125:33127 Imp <> AId constr
R33129:33129 Imp <> Y def
R33153:33157 Imp <> ::x_'::='_x not
R33152:33152 Imp <> X def
R33158:33162 Imp <> APlus constr
R33173:33176 Imp <> ANum constr
R33165:33167 Imp <> AId constr
R33169:33169 Imp <> X def
prf 33440:33464 <> fold_constants_aexp_sound
R33471:33482 Equiv <> atrans_sound def
R33484:33502 Equiv <> fold_constants_aexp def
R33521:33532 Equiv <> atrans_sound def
R33552:33557 Equiv <> aequiv def
R33986:34004 Equiv <> fold_constants_aexp def
R34030:34048 Equiv <> fold_constants_aexp def
R33986:34004 Equiv <> fold_constants_aexp def
R34030:34048 Equiv <> fold_constants_aexp def
R34030:34048 Equiv <> fold_constants_aexp def
R34030:34048 Equiv <> fold_constants_aexp def
R34030:34048 Equiv <> fold_constants_aexp def
R34030:34048 Equiv <> fold_constants_aexp def
R33986:34004 Equiv <> fold_constants_aexp def
R34030:34048 Equiv <> fold_constants_aexp def
R34030:34048 Equiv <> fold_constants_aexp def
R34030:34048 Equiv <> fold_constants_aexp def
R34030:34048 Equiv <> fold_constants_aexp def
R34030:34048 Equiv <> fold_constants_aexp def
R33986:34004 Equiv <> fold_constants_aexp def
R34030:34048 Equiv <> fold_constants_aexp def
R34030:34048 Equiv <> fold_constants_aexp def
R34030:34048 Equiv <> fold_constants_aexp def
R34030:34048 Equiv <> fold_constants_aexp def
R34030:34048 Equiv <> fold_constants_aexp def
prf 37050:37074 <> fold_constants_bexp_sound
R37080:37091 Equiv <> btrans_sound def
R37093:37111 Equiv <> fold_constants_bexp def
R37130:37141 Equiv <> btrans_sound def
R37161:37166 Equiv <> bequiv def
R37677:37695 Equiv <> fold_constants_aexp def
R37677:37695 Equiv <> fold_constants_aexp def
R37734:37752 Equiv <> fold_constants_aexp def
R37734:37752 Equiv <> fold_constants_aexp def
R37790:37794 Imp <> aeval def
R37809:37813 Imp <> aeval def
R37856:37880 Equiv <> fold_constants_aexp_sound thm
R37809:37813 Imp <> aeval def
R37790:37794 Imp <> aeval def
R37856:37880 Equiv <> fold_constants_aexp_sound thm
R37910:37914 Imp <> aeval def
R37929:37933 Imp <> aeval def
R37976:38000 Equiv <> fold_constants_aexp_sound thm
R37929:37933 Imp <> aeval def
R37910:37914 Imp <> aeval def
R37976:38000 Equiv <> fold_constants_aexp_sound thm
R38191:38197 Coq.Arith.EqNat <> beq_nat def
R38191:38197 Coq.Arith.EqNat <> beq_nat def
R38301:38319 Equiv <> fold_constants_bexp def
R38301:38319 Equiv <> fold_constants_bexp def
R38432:38450 Equiv <> fold_constants_bexp def
R38432:38450 Equiv <> fold_constants_bexp def
R38490:38508 Equiv <> fold_constants_bexp def
R38490:38508 Equiv <> fold_constants_bexp def
prf 38751:38774 <> fold_constants_com_sound
R38781:38792 Equiv <> ctrans_sound def
R38794:38811 Equiv <> fold_constants_com def
R38831:38842 Equiv <> ctrans_sound def
R38916:38926 Equiv <> refl_cequiv thm
R38916:38926 Equiv <> refl_cequiv thm
R38949:38963 Equiv <> CAss_congruence thm
R38949:38963 Equiv <> CAss_congruence thm
R38972:38996 Equiv <> fold_constants_aexp_sound thm
R38972:38996 Equiv <> fold_constants_aexp_sound thm
R39018:39032 Equiv <> CSeq_congruence thm
R39018:39032 Equiv <> CSeq_congruence thm
R39074:39079 Equiv <> bequiv def
R39084:39102 Equiv <> fold_constants_bexp def
R39074:39079 Equiv <> bequiv def
R39084:39102 Equiv <> fold_constants_bexp def
R39146:39170 Equiv <> fold_constants_bexp_sound thm
R39146:39170 Equiv <> fold_constants_bexp_sound thm
R39187:39205 Equiv <> fold_constants_bexp def
R39379:39392 Equiv <> CIf_congruence thm
R39187:39205 Equiv <> fold_constants_bexp def
R39379:39392 Equiv <> CIf_congruence thm
R39379:39392 Equiv <> CIf_congruence thm
R39379:39392 Equiv <> CIf_congruence thm
R39379:39392 Equiv <> CIf_congruence thm
R39379:39392 Equiv <> CIf_congruence thm
R39379:39392 Equiv <> CIf_congruence thm
R39447:39458 Equiv <> trans_cequiv thm
R39447:39458 Equiv <> trans_cequiv thm
R39497:39504 Equiv <> IFB_true thm
R39497:39504 Equiv <> IFB_true thm
R39559:39570 Equiv <> trans_cequiv thm
R39559:39570 Equiv <> trans_cequiv thm
R39609:39617 Equiv <> IFB_false thm
R39609:39617 Equiv <> IFB_false thm
R39660:39665 Equiv <> bequiv def
R39670:39688 Equiv <> fold_constants_bexp def
R39660:39665 Equiv <> bequiv def
R39670:39688 Equiv <> fold_constants_bexp def
R39732:39756 Equiv <> fold_constants_bexp_sound thm
R39732:39756 Equiv <> fold_constants_bexp_sound thm
R39773:39791 Equiv <> fold_constants_bexp def
R39824:39840 Equiv <> CWhile_congruence thm
R39773:39791 Equiv <> fold_constants_bexp def
R39824:39840 Equiv <> CWhile_congruence thm
R39824:39840 Equiv <> CWhile_congruence thm
R39824:39840 Equiv <> CWhile_congruence thm
R39824:39840 Equiv <> CWhile_congruence thm
R39824:39840 Equiv <> CWhile_congruence thm
R39824:39840 Equiv <> CWhile_congruence thm
R39899:39908 Equiv <> WHILE_true thm
R39899:39908 Equiv <> WHILE_true thm
R39964:39974 Equiv <> WHILE_false thm
R39964:39974 Equiv <> WHILE_false thm
def 41439:41457 <> optimize_0plus_aexp
R41462:41465 Imp <> aexp ind
R41470:41473 Imp <> aexp ind
R41486:41486 Equiv <> e var
R41499:41502 Imp <> ANum constr
R41515:41518 Imp <> ANum constr
R41528:41530 Imp <> AId constr
R41537:41539 Imp <> AId constr
R41549:41553 Imp <> APlus constr
R41556:41559 Imp <> ANum constr
R41576:41594 Equiv <> optimize_0plus_aexp def
R41605:41609 Imp <> APlus constr
R41626:41630 Imp <> APlus constr
R41658:41676 Equiv <> optimize_0plus_aexp def
R41633:41651 Equiv <> optimize_0plus_aexp def
R41688:41693 Imp <> AMinus constr
R41710:41715 Imp <> AMinus constr
R41743:41761 Equiv <> optimize_0plus_aexp def
R41718:41736 Equiv <> optimize_0plus_aexp def
R41773:41777 Imp <> AMult constr
R41794:41798 Imp <> AMult constr
R41826:41844 Equiv <> optimize_0plus_aexp def
R41801:41819 Equiv <> optimize_0plus_aexp def
def 41867:41885 <> optimize_0plus_bexp
R41892:41895 Imp <> bexp ind
R41900:41903 Imp <> bexp ind
R41916:41916 Equiv <> b var
R41927:41931 Imp <> BTrue constr
R41936:41940 Imp <> BTrue constr
R41946:41951 Imp <> BFalse constr
R41956:41961 Imp <> BFalse constr
R41967:41969 Imp <> BEq constr
R41980:41982 Imp <> BEq constr
R42010:42028 Equiv <> optimize_0plus_aexp def
R41985:42003 Equiv <> optimize_0plus_aexp def
R42038:42040 Imp <> BLe constr
R42051:42053 Imp <> BLe constr
R42081:42099 Equiv <> optimize_0plus_aexp def
R42056:42074 Equiv <> optimize_0plus_aexp def
R42109:42112 Imp <> BNot constr
R42120:42123 Imp <> BNot constr
R42126:42144 Equiv <> optimize_0plus_bexp def
R42154:42157 Imp <> BAnd constr
R42168:42171 Imp <> BAnd constr
R42199:42217 Equiv <> optimize_0plus_bexp def
R42174:42192 Equiv <> optimize_0plus_bexp def
def 42238:42255 <> optimize_0plus_com
R42260:42262 Imp <> com ind
R42267:42269 Imp <> com ind
R42280:42280 Equiv <> c var
R42293:42297 Imp <> CSkip constr
R42302:42306 Imp <> CSkip constr
R42314:42317 Imp <> CAss constr
R42328:42331 Imp <> CAss constr
R42337:42355 Equiv <> optimize_0plus_aexp def
R42367:42370 Imp <> CSeq constr
R42381:42384 Imp <> CSeq constr
R42411:42428 Equiv <> optimize_0plus_com def
R42387:42404 Equiv <> optimize_0plus_com def
R42440:42442 Imp <> CIf constr
R42455:42457 Imp <> CIf constr
R42558:42575 Equiv <> optimize_0plus_com def
R42509:42526 Equiv <> optimize_0plus_com def
R42460:42478 Equiv <> optimize_0plus_bexp def
R42587:42592 Imp <> CWhile constr
R42601:42606 Imp <> CWhile constr
R42633:42650 Equiv <> optimize_0plus_com def
R42652:42652 Equiv <> c var
R42609:42627 Equiv <> optimize_0plus_bexp def
prf 42669:42693 <> optimize_0plus_aexp_sound
R42699:42710 Equiv <> atrans_sound def
R42712:42730 Equiv <> optimize_0plus_aexp def
prf 42870:42894 <> optimize_0plus_bexp_sound
R42899:42910 Equiv <> btrans_sound def
R42912:42930 Equiv <> optimize_0plus_bexp def
R43004:43028 Equiv <> optimize_0plus_aexp_sound thm
R43048:43072 Equiv <> optimize_0plus_aexp_sound thm
R43004:43028 Equiv <> optimize_0plus_aexp_sound thm
R43004:43028 Equiv <> optimize_0plus_aexp_sound thm
R43004:43028 Equiv <> optimize_0plus_aexp_sound thm
R43004:43028 Equiv <> optimize_0plus_aexp_sound thm
R43048:43072 Equiv <> optimize_0plus_aexp_sound thm
R43048:43072 Equiv <> optimize_0plus_aexp_sound thm
R43048:43072 Equiv <> optimize_0plus_aexp_sound thm
R43048:43072 Equiv <> optimize_0plus_aexp_sound thm
prf 43152:43175 <> optimize_0plus_com_sound
R43181:43192 Equiv <> ctrans_sound def
R43194:43211 Equiv <> optimize_0plus_com def
R43230:43241 Equiv <> ctrans_sound def
R43304:43318 Equiv <> CAss_congruence thm
R43304:43318 Equiv <> CAss_congruence thm
R43327:43351 Equiv <> optimize_0plus_aexp_sound thm
R43327:43351 Equiv <> optimize_0plus_aexp_sound thm
R43364:43378 Equiv <> CSeq_congruence thm
R43364:43378 Equiv <> CSeq_congruence thm
R43397:43410 Equiv <> CIf_congruence thm
R43429:43453 Equiv <> optimize_0plus_bexp_sound thm
R43397:43410 Equiv <> CIf_congruence thm
R43429:43453 Equiv <> optimize_0plus_bexp_sound thm
R43466:43482 Equiv <> CWhile_congruence thm
R43501:43525 Equiv <> optimize_0plus_bexp_sound thm
R43466:43482 Equiv <> CWhile_congruence thm
R43501:43525 Equiv <> optimize_0plus_bexp_sound thm
def 43542:43550 <> optimizer
R43983:44022 Coq.Init.Logic <> :type_scope:x_'='_x not
R44299:44299 Coq.Init.Logic <> :type_scope:x_'='_x not
R43558:43575 Equiv <> optimize_0plus_com def
R43578:43595 Equiv <> fold_constants_com def
R43632:43639 Imp <> ::x_';;'_x not
R43604:43608 Imp <> ::x_'::='_x not
R43603:43603 Imp <> X def
R43609:43613 Imp <> APlus constr
R43625:43628 Imp <> ANum constr
R43616:43619 Imp <> ANum constr
R43669:43676 Imp <> ::x_';;'_x not
R43641:43645 Imp <> ::x_'::='_x not
R43640:43640 Imp <> Y def
R43646:43651 Imp <> AMinus constr
R43662:43665 Imp <> ANum constr
R43654:43656 Imp <> AId constr
R43658:43658 Imp <> X def
R43774:43781 Imp <> ::x_';;'_x not
R43677:43680 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R43719:43731 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R43744:43761 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R43766:43773 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R43681:43683 Imp <> BLe constr
R43695:43699 Imp <> APlus constr
R43711:43714 Imp <> ANum constr
R43702:43705 Imp <> ANum constr
R43686:43689 Imp <> ANum constr
R43733:43737 Imp <> ::x_'::='_x not
R43732:43732 Imp <> Y def
R43738:43741 Imp <> ANum constr
R43762:43765 Imp <> ::'SKIP' not
R43895:43902 Imp <> ::x_';;'_x not
R43782:43787 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R43808:43818 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R43886:43894 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R43788:43790 Imp <> BEq constr
R43801:43804 Imp <> ANum constr
R43793:43795 Imp <> AId constr
R43797:43797 Imp <> Y def
R43847:43856 Imp <> ::x_';;'_x not
R43820:43824 Imp <> ::x_'::='_x not
R43819:43819 Imp <> X def
R43825:43829 Imp <> APlus constr
R43840:43843 Imp <> ANum constr
R43832:43834 Imp <> AId constr
R43836:43836 Imp <> X def
R43858:43862 Imp <> ::x_'::='_x not
R43857:43857 Imp <> Y def
R43863:43868 Imp <> AMinus constr
R43879:43882 Imp <> ANum constr
R43871:43873 Imp <> AId constr
R43875:43875 Imp <> Y def
R43903:43906 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R43926:43938 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R43951:43968 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R43973:43980 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R43907:43909 Imp <> BEq constr
R43920:43922 Imp <> AId constr
R43924:43924 Imp <> Y def
R43912:43914 Imp <> AId constr
R43916:43916 Imp <> X def
R43940:43944 Imp <> ::x_'::='_x not
R43939:43939 Imp <> Y def
R43945:43948 Imp <> ANum constr
R43969:43972 Imp <> ::'SKIP' not
R44035:44042 Imp <> ::x_';;'_x not
R44024:44028 Imp <> ::x_'::='_x not
R44023:44023 Imp <> X def
R44029:44032 Imp <> ANum constr
R44072:44079 Imp <> ::x_';;'_x not
R44044:44048 Imp <> ::x_'::='_x not
R44043:44043 Imp <> Y def
R44049:44054 Imp <> AMinus constr
R44065:44068 Imp <> ANum constr
R44057:44059 Imp <> AId constr
R44061:44061 Imp <> X def
R44092:44099 Imp <> ::x_';;'_x not
R44081:44085 Imp <> ::x_'::='_x not
R44080:44080 Imp <> Y def
R44086:44089 Imp <> ANum constr
R44213:44220 Imp <> ::x_';;'_x not
R44100:44105 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R44126:44136 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R44204:44212 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R44106:44108 Imp <> BEq constr
R44119:44122 Imp <> ANum constr
R44111:44113 Imp <> AId constr
R44115:44115 Imp <> Y def
R44165:44174 Imp <> ::x_';;'_x not
R44138:44142 Imp <> ::x_'::='_x not
R44137:44137 Imp <> X def
R44143:44147 Imp <> APlus constr
R44158:44161 Imp <> ANum constr
R44150:44152 Imp <> AId constr
R44154:44154 Imp <> X def
R44176:44180 Imp <> ::x_'::='_x not
R44175:44175 Imp <> Y def
R44181:44186 Imp <> AMinus constr
R44197:44200 Imp <> ANum constr
R44189:44191 Imp <> AId constr
R44193:44193 Imp <> Y def
R44221:44224 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R44244:44256 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R44269:44286 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R44291:44298 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R44225:44227 Imp <> BEq constr
R44238:44240 Imp <> AId constr
R44242:44242 Imp <> Y def
R44230:44232 Imp <> AId constr
R44234:44234 Imp <> X def
R44258:44262 Imp <> ::x_'::='_x not
R44257:44257 Imp <> Y def
R44263:44266 Imp <> ANum constr
R44287:44290 Imp <> ::'SKIP' not
def 45230:45239 <> subst_aexp
R45246:45247 SfLib <> id ind
R45255:45258 Imp <> aexp ind
R45266:45269 Imp <> aexp ind
R45274:45277 Imp <> aexp ind
R45290:45290 Equiv <> a var
R45301:45304 Imp <> ANum constr
R45317:45320 Imp <> ANum constr
R45328:45330 Imp <> AId constr
R45347:45355 SfLib <> eq_id_dec thm
R45357:45357 Equiv <> i var
R45374:45376 Imp <> AId constr
R45367:45367 Equiv <> u var
R45385:45389 Imp <> APlus constr
R45401:45405 Imp <> APlus constr
R45428:45437 Equiv <> subst_aexp def
R45441:45441 Equiv <> u var
R45439:45439 Equiv <> i var
R45408:45417 Equiv <> subst_aexp def
R45421:45421 Equiv <> u var
R45419:45419 Equiv <> i var
R45451:45456 Imp <> AMinus constr
R45467:45472 Imp <> AMinus constr
R45495:45504 Equiv <> subst_aexp def
R45508:45508 Equiv <> u var
R45506:45506 Equiv <> i var
R45475:45484 Equiv <> subst_aexp def
R45488:45488 Equiv <> u var
R45486:45486 Equiv <> i var
R45518:45522 Imp <> AMult constr
R45534:45538 Imp <> AMult constr
R45561:45570 Equiv <> subst_aexp def
R45574:45574 Equiv <> u var
R45572:45572 Equiv <> i var
R45541:45550 Equiv <> subst_aexp def
R45554:45554 Equiv <> u var
R45552:45552 Equiv <> i var
def 45596:45608 <> subst_aexp_ex
R45678:45683 Coq.Init.Logic <> :type_scope:x_'='_x not
R45725:45725 Coq.Init.Logic <> :type_scope:x_'='_x not
R45614:45623 Equiv <> subst_aexp def
R45656:45660 Imp <> APlus constr
R45671:45673 Imp <> AId constr
R45675:45675 Imp <> X def
R45663:45665 Imp <> AId constr
R45667:45667 Imp <> Y def
R45628:45632 Imp <> APlus constr
R45645:45648 Imp <> ANum constr
R45635:45638 Imp <> ANum constr
R45625:45625 Imp <> X def
R45684:45688 Imp <> APlus constr
R45699:45703 Imp <> APlus constr
R45716:45719 Imp <> ANum constr
R45706:45709 Imp <> ANum constr
R45691:45693 Imp <> AId constr
R45695:45695 Imp <> Y def
def 45921:45940 <> subst_equiv_property
R45967:45972 Equiv <> cequiv def
R46017:46019 Imp <> ::x_';;'_x not
R46010:46014 Imp <> ::x_'::='_x not
R46008:46009 Equiv <> i1 var
R46015:46016 Equiv <> a1 var
R46022:46026 Imp <> ::x_'::='_x not
R46020:46021 Equiv <> i2 var
R46027:46036 Equiv <> subst_aexp def
R46044:46045 Equiv <> a2 var
R46041:46042 Equiv <> a1 var
R46038:46039 Equiv <> i1 var
R45984:45986 Imp <> ::x_';;'_x not
R45977:45981 Imp <> ::x_'::='_x not
R45975:45976 Equiv <> i1 var
R45982:45983 Equiv <> a1 var
R45989:45993 Imp <> ::x_'::='_x not
R45987:45988 Equiv <> i2 var
R45994:45995 Equiv <> a2 var
prf 47300:47312 <> subst_inequiv
R47319:47320 Coq.Init.Logic <> :type_scope:'~'_x not
R47321:47340 Equiv <> subst_equiv_property def
R47359:47378 Equiv <> subst_equiv_property def
R47589:47604 Imp <> ::x_';;'_x not
R47562:47566 Imp <> ::x_'::='_x not
R47561:47561 Imp <> X def
R47567:47571 Imp <> APlus constr
R47582:47585 Imp <> ANum constr
R47574:47576 Imp <> AId constr
R47578:47578 Imp <> X def
R47606:47610 Imp <> ::x_'::='_x not
R47605:47605 Imp <> Y def
R47611:47613 Imp <> AId constr
R47615:47615 Imp <> X def
R47589:47604 Imp <> ::x_';;'_x not
R47562:47566 Imp <> ::x_'::='_x not
R47561:47561 Imp <> X def
R47567:47571 Imp <> APlus constr
R47582:47585 Imp <> ANum constr
R47574:47576 Imp <> AId constr
R47578:47578 Imp <> X def
R47606:47610 Imp <> ::x_'::='_x not
R47605:47605 Imp <> Y def
R47611:47613 Imp <> AId constr
R47615:47615 Imp <> X def
R47672:47687 Imp <> ::x_';;'_x not
R47645:47649 Imp <> ::x_'::='_x not
R47644:47644 Imp <> X def
R47650:47654 Imp <> APlus constr
R47665:47668 Imp <> ANum constr
R47657:47659 Imp <> AId constr
R47661:47661 Imp <> X def
R47689:47693 Imp <> ::x_'::='_x not
R47688:47688 Imp <> Y def
R47694:47698 Imp <> APlus constr
R47709:47712 Imp <> ANum constr
R47701:47703 Imp <> AId constr
R47705:47705 Imp <> X def
R47672:47687 Imp <> ::x_';;'_x not
R47645:47649 Imp <> ::x_'::='_x not
R47644:47644 Imp <> X def
R47650:47654 Imp <> APlus constr
R47665:47668 Imp <> ANum constr
R47657:47659 Imp <> AId constr
R47661:47661 Imp <> X def
R47689:47693 Imp <> ::x_'::='_x not
R47688:47688 Imp <> Y def
R47694:47698 Imp <> APlus constr
R47709:47712 Imp <> ANum constr
R47701:47703 Imp <> AId constr
R47705:47705 Imp <> X def
R47742:47747 Equiv <> cequiv def
R47742:47747 Equiv <> cequiv def
R47967:47972 Imp <> update def
R47999:47999 Imp <> Y def
R47975:47980 Imp <> update def
R47994:47994 Imp <> X def
R47982:47992 Imp <> empty_state def
R47967:47972 Imp <> update def
R47999:47999 Imp <> Y def
R47975:47980 Imp <> update def
R47994:47994 Imp <> X def
R47982:47992 Imp <> empty_state def
R48024:48029 Imp <> update def
R48056:48056 Imp <> Y def
R48032:48037 Imp <> update def
R48051:48051 Imp <> X def
R48039:48049 Imp <> empty_state def
R48024:48029 Imp <> update def
R48056:48056 Imp <> Y def
R48032:48037 Imp <> update def
R48051:48051 Imp <> X def
R48039:48049 Imp <> empty_state def
R48085:48087 Imp <> ::x_'/'_x_'||'_x not
R48099:48102 Imp <> ::x_'/'_x_'||'_x not
R48088:48098 Imp <> empty_state def
R48125:48127 Imp <> ::x_'/'_x_'||'_x not
R48139:48142 Imp <> ::x_'/'_x_'||'_x not
R48128:48138 Imp <> empty_state def
R48196:48201 Imp <> update def
R48215:48215 Imp <> X def
R48203:48213 Imp <> empty_state def
R48176:48180 Imp <> E_Seq constr
R48236:48240 Imp <> E_Ass constr
R48085:48087 Imp <> ::x_'/'_x_'||'_x not
R48099:48102 Imp <> ::x_'/'_x_'||'_x not
R48088:48098 Imp <> empty_state def
R48125:48127 Imp <> ::x_'/'_x_'||'_x not
R48139:48142 Imp <> ::x_'/'_x_'||'_x not
R48128:48138 Imp <> empty_state def
R48125:48127 Imp <> ::x_'/'_x_'||'_x not
R48139:48142 Imp <> ::x_'/'_x_'||'_x not
R48128:48138 Imp <> empty_state def
R48196:48201 Imp <> update def
R48215:48215 Imp <> X def
R48203:48213 Imp <> empty_state def
R48176:48180 Imp <> E_Seq constr
R48236:48240 Imp <> E_Ass constr
R48236:48240 Imp <> E_Ass constr
R48196:48201 Imp <> update def
R48215:48215 Imp <> X def
R48203:48213 Imp <> empty_state def
R48176:48180 Imp <> E_Seq constr
R48236:48240 Imp <> E_Ass constr
R48236:48240 Imp <> E_Ass constr
R48196:48201 Imp <> update def
R48215:48215 Imp <> X def
R48203:48213 Imp <> empty_state def
R48176:48180 Imp <> E_Seq constr
R48236:48240 Imp <> E_Ass constr
R48236:48240 Imp <> E_Ass constr
R48196:48201 Imp <> update def
R48215:48215 Imp <> X def
R48203:48213 Imp <> empty_state def
R48176:48180 Imp <> E_Seq constr
R48395:48397 Coq.Init.Logic <> :type_scope:x_'='_x not
R48418:48436 Imp <> ceval_deterministic thm
R48441:48451 Imp <> empty_state def
R48395:48397 Coq.Init.Logic <> :type_scope:x_'='_x not
R48418:48436 Imp <> ceval_deterministic thm
R48441:48451 Imp <> empty_state def
R48493:48495 Coq.Init.Logic <> :type_scope:x_'='_x not
R48492:48492 Imp <> Y def
R48500:48500 Imp <> Y def
R48493:48495 Coq.Init.Logic <> :type_scope:x_'='_x not
R48492:48492 Imp <> Y def
R48500:48500 Imp <> Y def
ind 48908:48927 <> var_not_used_in_aexp
constr 48958:48963 <> VNUNum
constr 49012:49016 <> VNUId
constr 49074:49080 <> VNUPlus
constr 49215:49222 <> VNUMinus
constr 49358:49364 <> VNUMult
R48932:48933 SfLib <> id ind
R48938:48941 Imp <> aexp ind
R48976:48995 Equiv <> var_not_used_in_aexp ind
R49000:49003 Imp <> ANum constr
R49005:49005 Equiv <> n var
R49039:49058 Equiv <> var_not_used_in_aexp ind
R49063:49065 Imp <> AId constr
R49067:49067 Equiv <> Y var
R49030:49033 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R49034:49034 Equiv <> Y var
R49174:49193 Equiv <> var_not_used_in_aexp ind
R49198:49202 Imp <> APlus constr
R49207:49208 Equiv <> a2 var
R49204:49205 Equiv <> a1 var
R49139:49158 Equiv <> var_not_used_in_aexp ind
R49162:49163 Equiv <> a2 var
R49104:49123 Equiv <> var_not_used_in_aexp ind
R49127:49128 Equiv <> a1 var
R49316:49335 Equiv <> var_not_used_in_aexp ind
R49340:49345 Imp <> AMinus constr
R49350:49351 Equiv <> a2 var
R49347:49348 Equiv <> a1 var
R49281:49300 Equiv <> var_not_used_in_aexp ind
R49304:49305 Equiv <> a2 var
R49246:49265 Equiv <> var_not_used_in_aexp ind
R49269:49270 Equiv <> a1 var
R49458:49477 Equiv <> var_not_used_in_aexp ind
R49482:49486 Imp <> AMult constr
R49491:49492 Equiv <> a2 var
R49488:49489 Equiv <> a1 var
R49423:49442 Equiv <> var_not_used_in_aexp ind
R49446:49447 Equiv <> a2 var
R49388:49407 Equiv <> var_not_used_in_aexp ind
R49411:49412 Equiv <> a1 var
prf 49503:49517 <> aeval_weakening
R49595:49597 Coq.Init.Logic <> :type_scope:x_'='_x not
R49571:49575 Imp <> aeval def
R49594:49594 Equiv <> a var
R49578:49583 Imp <> update def
R49590:49591 Equiv <> ni var
R49588:49588 Equiv <> i var
R49585:49586 Equiv <> st var
R49598:49602 Imp <> aeval def
R49607:49607 Equiv <> a var
R49604:49605 Equiv <> st var
R49541:49560 Equiv <> var_not_used_in_aexp ind
R49564:49564 Equiv <> a var
R49562:49562 Equiv <> i var
prf 49917:49932 <> inequiv_exercise
R49938:49939 Coq.Init.Logic <> :type_scope:'~'_x not
R49940:49945 Equiv <> cequiv def
R49973:49976 Imp <> ::'SKIP' not
R49948:49953 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R49959:49962 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R49967:49970 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R49954:49958 Imp <> BTrue constr
R49963:49966 Imp <> ::'SKIP' not
mod 52006:52009 <> Himp
ind 52114:52116 Himp com
constr 52132:52136 Himp CSkip
constr 52148:52151 Himp CAss
constr 52177:52180 Himp CSeq
constr 52206:52208 Himp CIf
constr 52242:52247 Himp CWhile
constr 52274:52279 Himp CHavoc
R52140:52142 Equiv <> com ind
R52169:52171 Equiv <> com ind
R52161:52164 Imp <> aexp ind
R52155:52156 SfLib <> id ind
R52198:52200 Equiv <> com ind
R52191:52193 Equiv <> com ind
R52184:52186 Equiv <> com ind
R52234:52236 Equiv <> com ind
R52227:52229 Equiv <> com ind
R52220:52222 Equiv <> com ind
R52212:52215 Imp <> bexp ind
R52266:52268 Equiv <> com ind
R52259:52261 Equiv <> com ind
R52251:52254 Imp <> bexp ind
R52289:52291 Equiv <> com ind
R52283:52284 SfLib <> id ind
R52538:52542 Equiv Himp CSkip constr
not 52524 Himp ::'SKIP'
R52572:52575 Equiv Himp CAss constr
not 52554 Himp ::x_'::='_x
R52623:52626 Equiv Himp CSeq constr
not 52606 Himp ::x_';;'_x
R52711:52716 Equiv Himp CWhile constr
not 52680 Himp ::'WHILE'_x_'DO'_x_'END'
R52810:52812 Equiv Himp CIf constr
not 52768 Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI'
R52885:52890 Equiv Himp CHavoc constr
not 52869 Himp ::'HAVOC'_x
ind 53301:53305 Himp ceval
constr 53346:53351 Himp E_Skip
constr 53394:53398 Himp E_Ass
constr 53522:53526 Himp E_Seq
constr 53652:53659 Himp E_IfTrue
constr 53828:53836 Himp E_IfFalse
constr 54008:54017 Himp E_WhileEnd
constr 54141:54151 Himp E_WhileLoop
constr 54395:54401 Himp E_Havoc
R53325:53329 Imp <> state def
R53316:53320 Imp <> state def
R53309:53311 Equiv Himp com ind
R54492:54496 Equiv <> ceval ind
R53367:53371 Imp <> state def
R53378:53380 Equiv Himp ::x_'/'_x_'||'_x not
R53383:53386 Equiv Himp ::x_'/'_x_'||'_x not
R53374:53377 Equiv Himp ::'SKIP' not
R53381:53382 Equiv <> st var
R53387:53388 Equiv <> st var
R53415:53419 Imp <> state def
R53428:53431 Imp <> aexp ind
R53439:53441 Coq.Init.Datatypes <> nat ind
R53449:53450 SfLib <> id ind
R53485:53485 Equiv Himp ::x_'/'_x_'||'_x not
R53494:53497 Equiv Himp ::x_'/'_x_'||'_x not
R53500:53503 Equiv Himp ::x_'/'_x_'||'_x not
R53487:53491 Equiv Himp ::x_'::='_x not
R53486:53486 Equiv <> X var
R53492:53493 Equiv <> a1 var
R53498:53499 Equiv <> st var
R53504:53509 Imp <> update def
R53516:53516 Equiv <> n var
R53514:53514 Equiv <> X var
R53511:53512 Equiv <> st var
R53477:53479 Coq.Init.Logic <> :type_scope:x_'='_x not
R53466:53470 Imp <> aeval def
R53475:53476 Equiv <> a1 var
R53472:53473 Equiv <> st var
R53480:53480 Equiv <> n var
R53546:53548 Equiv Himp com ind
R53566:53570 Imp <> state def
R53624:53624 Equiv Himp ::x_'/'_x_'||'_x not
R53633:53636 Equiv Himp ::x_'/'_x_'||'_x not
R53639:53642 Equiv Himp ::x_'/'_x_'||'_x not
R53627:53630 Equiv Himp ::x_';;'_x not
R53625:53626 Equiv <> c1 var
R53631:53632 Equiv <> c2 var
R53637:53638 Equiv <> st var
R53643:53646 Equiv <> st'' var
R53606:53608 Equiv Himp ::x_'/'_x_'||'_x not
R53612:53615 Equiv Himp ::x_'/'_x_'||'_x not
R53604:53605 Equiv <> c2 var
R53609:53611 Equiv <> st' var
R53616:53619 Equiv <> st'' var
R53588:53590 Equiv Himp ::x_'/'_x_'||'_x not
R53593:53596 Equiv Himp ::x_'/'_x_'||'_x not
R53586:53587 Equiv <> c1 var
R53591:53592 Equiv <> st var
R53597:53599 Equiv <> st' var
R53680:53684 Imp <> state def
R53693:53696 Imp <> bexp ind
R53708:53710 Equiv Himp com ind
R53784:53784 Equiv Himp ::x_'/'_x_'||'_x not
R53810:53813 Equiv Himp ::x_'/'_x_'||'_x not
R53816:53819 Equiv Himp ::x_'/'_x_'||'_x not
R53785:53788 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R53791:53796 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R53799:53804 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R53807:53809 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R53789:53790 Equiv <> b1 var
R53797:53798 Equiv <> c1 var
R53805:53806 Equiv <> c2 var
R53814:53815 Equiv <> st var
R53820:53822 Equiv <> st' var
R53768:53770 Equiv Himp ::x_'/'_x_'||'_x not
R53773:53776 Equiv Himp ::x_'/'_x_'||'_x not
R53766:53767 Equiv <> c1 var
R53771:53772 Equiv <> st var
R53777:53779 Equiv <> st' var
R53740:53742 Coq.Init.Logic <> :type_scope:x_'='_x not
R53729:53733 Imp <> beval def
R53738:53739 Equiv <> b1 var
R53735:53736 Equiv <> st var
R53743:53746 Coq.Init.Datatypes <> true constr
R53857:53861 Imp <> state def
R53870:53873 Imp <> bexp ind
R53885:53887 Equiv Himp com ind
R53964:53964 Equiv Himp ::x_'/'_x_'||'_x not
R53990:53993 Equiv Himp ::x_'/'_x_'||'_x not
R53996:53999 Equiv Himp ::x_'/'_x_'||'_x not
R53965:53968 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R53971:53976 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R53979:53984 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R53987:53989 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R53969:53970 Equiv <> b1 var
R53977:53978 Equiv <> c1 var
R53985:53986 Equiv <> c2 var
R53994:53995 Equiv <> st var
R54000:54002 Equiv <> st' var
R53948:53950 Equiv Himp ::x_'/'_x_'||'_x not
R53953:53956 Equiv Himp ::x_'/'_x_'||'_x not
R53946:53947 Equiv <> c2 var
R53951:53952 Equiv <> st var
R53957:53959 Equiv <> st' var
R53918:53920 Coq.Init.Logic <> :type_scope:x_'='_x not
R53907:53911 Imp <> beval def
R53916:53917 Equiv <> b1 var
R53913:53914 Equiv <> st var
R53921:53925 Coq.Init.Datatypes <> false constr
R54034:54037 Imp <> bexp ind
R54046:54050 Imp <> state def
R54059:54061 Equiv Himp com ind
R54105:54105 Equiv Himp ::x_'/'_x_'||'_x not
R54124:54127 Equiv Himp ::x_'/'_x_'||'_x not
R54130:54133 Equiv Himp ::x_'/'_x_'||'_x not
R54106:54111 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R54114:54117 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R54120:54123 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R54112:54113 Equiv <> b1 var
R54118:54119 Equiv <> c1 var
R54128:54129 Equiv <> st var
R54134:54135 Equiv <> st var
R54093:54095 Coq.Init.Logic <> :type_scope:x_'='_x not
R54082:54086 Imp <> beval def
R54091:54092 Equiv <> b1 var
R54088:54089 Equiv <> st var
R54096:54100 Coq.Init.Datatypes <> false constr
R54177:54181 Imp <> state def
R54190:54193 Imp <> bexp ind
R54202:54204 Equiv Himp com ind
R54358:54358 Equiv Himp ::x_'/'_x_'||'_x not
R54377:54380 Equiv Himp ::x_'/'_x_'||'_x not
R54383:54386 Equiv Himp ::x_'/'_x_'||'_x not
R54359:54364 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R54367:54370 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R54373:54376 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R54365:54366 Equiv <> b1 var
R54371:54372 Equiv <> c1 var
R54381:54382 Equiv <> st var
R54387:54390 Equiv <> st'' var
R54302:54302 Equiv Himp ::x_'/'_x_'||'_x not
R54321:54324 Equiv Himp ::x_'/'_x_'||'_x not
R54328:54331 Equiv Himp ::x_'/'_x_'||'_x not
R54303:54308 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R54311:54314 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R54317:54320 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R54309:54310 Equiv <> b1 var
R54315:54316 Equiv <> c1 var
R54325:54327 Equiv <> st' var
R54332:54335 Equiv <> st'' var
R54268:54270 Equiv Himp ::x_'/'_x_'||'_x not
R54273:54276 Equiv Himp ::x_'/'_x_'||'_x not
R54266:54267 Equiv <> c1 var
R54271:54272 Equiv <> st var
R54277:54279 Equiv <> st' var
R54237:54239 Coq.Init.Logic <> :type_scope:x_'='_x not
R54226:54230 Imp <> beval def
R54235:54236 Equiv <> b1 var
R54232:54233 Equiv <> st var
R54240:54243 Coq.Init.Datatypes <> true constr
R54422:54422 Equiv Himp ::x_'/'_x_'||'_x not
R54431:54434 Equiv Himp ::x_'/'_x_'||'_x not
R54437:54441 Equiv Himp ::x_'/'_x_'||'_x not
R54457:54457 Equiv Himp ::x_'/'_x_'||'_x not
R54423:54428 Equiv Himp CHavoc constr
R54430:54430 Equiv <> l var
R54435:54436 Equiv <> st var
R54442:54447 Imp <> update def
R54454:54456 Equiv <> val var
R54452:54452 Equiv <> l var
R54449:54450 Equiv <> st var
R54492:54496 Equiv Himp ceval ind
not 54467 Himp ::x_'/'_x_'||'_x
def 54877:54890 Himp havoc_example1
R54894:54894 Equiv Himp ::x_'/'_x_'||'_x not
R54902:54905 Equiv Himp ::x_'/'_x_'||'_x not
R54917:54920 Equiv Himp ::x_'/'_x_'||'_x not
R54895:54900 Equiv Himp ::'HAVOC'_x not
R54901:54901 Imp <> X def
R54906:54916 Imp <> empty_state def
R54921:54926 Imp <> update def
R54940:54940 Imp <> X def
R54928:54938 Imp <> empty_state def
R54960:54966 Equiv Himp E_Havoc constr
R54960:54966 Equiv Himp E_Havoc constr
def 54983:54996 Himp havoc_example2
R55002:55002 Equiv Himp ::x_'/'_x_'||'_x not
R55017:55020 Equiv Himp ::x_'/'_x_'||'_x not
R55032:55035 Equiv Himp ::x_'/'_x_'||'_x not
R55007:55009 Equiv Himp ::x_';;'_x not
R55003:55006 Equiv Himp ::'SKIP' not
R55010:55015 Equiv Himp ::'HAVOC'_x not
R55016:55016 Imp <> Z def
R55021:55031 Imp <> empty_state def
R55036:55041 Imp <> update def
R55055:55055 Imp <> Z def
R55043:55053 Imp <> empty_state def
R55087:55097 Imp <> empty_state def
R55076:55080 Equiv Himp E_Seq constr
R55087:55097 Imp <> empty_state def
R55076:55080 Equiv Himp E_Seq constr
R55109:55114 Equiv Himp E_Skip constr
R55109:55114 Equiv Himp E_Skip constr
R55126:55132 Equiv Himp E_Havoc constr
R55126:55132 Equiv Himp E_Havoc constr
def 55239:55244 Himp cequiv
R55255:55257 Equiv Himp com ind
R55286:55290 Imp <> state def
R55309:55313 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R55297:55299 Equiv Himp ::x_'/'_x_'||'_x not
R55302:55305 Equiv Himp ::x_'/'_x_'||'_x not
R55295:55296 Equiv <> c1 var
R55300:55301 Equiv <> st var
R55306:55308 Equiv <> st' var
R55316:55318 Equiv Himp ::x_'/'_x_'||'_x not
R55321:55324 Equiv Himp ::x_'/'_x_'||'_x not
R55314:55315 Equiv <> c2 var
R55319:55320 Equiv <> st var
R55325:55327 Equiv <> st' var
def 55628:55630 Himp pXY
R55644:55646 Equiv Himp ::x_';;'_x not
R55637:55642 Equiv Himp ::'HAVOC'_x not
R55643:55643 Imp <> X def
R55647:55652 Equiv Himp ::'HAVOC'_x not
R55653:55653 Imp <> Y def
def 55668:55670 Himp pYX
R55684:55686 Equiv Himp ::x_';;'_x not
R55677:55682 Equiv Himp ::'HAVOC'_x not
R55683:55683 Imp <> Y def
R55687:55692 Equiv Himp ::'HAVOC'_x not
R55693:55693 Imp <> X def
prf 55798:55811 Himp pXY_SwapHelper
R55869:55871 Coq.Init.Logic <> :type_scope:x_'='_x not
R55837:55842 Imp <> update def
R55865:55868 Equiv <> val2 var
R55863:55863 Imp <> Y def
R55845:55850 Imp <> update def
R55857:55860 Equiv <> val1 var
R55855:55855 Imp <> X def
R55852:55853 Equiv <> st var
R55872:55877 Imp <> update def
R55900:55903 Equiv <> val1 var
R55898:55898 Imp <> X def
R55880:55885 Imp <> update def
R55892:55895 Equiv <> val2 var
R55890:55890 Imp <> Y def
R55887:55888 Equiv <> st var
R55929:55953 Equiv Himp functional_extensionality prfax
R55929:55953 Equiv Himp functional_extensionality prfax
R55972:55985 Imp <> update_permute thm
R55972:55985 Imp <> update_permute thm
R55998:56000 Coq.Init.Logic <> not def
prf 56040:56053 Himp pXY_cequiv_pYX
R56073:56076 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R56059:56064 Equiv Himp cequiv def
R56070:56072 Equiv Himp pYX def
R56066:56068 Equiv Himp pXY def
R56077:56077 Coq.Init.Logic <> :type_scope:'~'_x not
R56078:56083 Equiv Himp cequiv def
R56089:56091 Equiv Himp pYX def
R56085:56087 Equiv Himp pXY def
R56116:56118 Equiv Himp pXY def
R56121:56123 Equiv Himp pYX def
R56226:56231 Imp <> update def
R56236:56236 Imp <> Y def
R56214:56218 Equiv Himp E_Seq constr
R56226:56231 Imp <> update def
R56236:56236 Imp <> Y def
R56214:56218 Equiv Himp E_Seq constr
R56270:56283 Equiv Himp pXY_SwapHelper thm
R56270:56283 Equiv Himp pXY_SwapHelper thm
R56334:56339 Imp <> update def
R56344:56344 Imp <> X def
R56322:56326 Equiv Himp E_Seq constr
R56334:56339 Imp <> update def
R56344:56344 Imp <> X def
R56322:56326 Equiv Himp E_Seq constr
R56381:56394 Equiv Himp pXY_SwapHelper thm
R56381:56394 Equiv Himp pXY_SwapHelper thm
def 56542:56547 Himp ptwice
R56561:56563 Equiv Himp ::x_';;'_x not
R56554:56559 Equiv Himp ::'HAVOC'_x not
R56560:56560 Imp <> X def
R56564:56569 Equiv Himp ::'HAVOC'_x not
R56570:56570 Imp <> Y def
def 56585:56589 Himp pcopy
R56603:56605 Equiv Himp ::x_';;'_x not
R56596:56601 Equiv Himp ::'HAVOC'_x not
R56602:56602 Imp <> X def
R56607:56611 Equiv Himp ::x_'::='_x not
R56606:56606 Imp <> Y def
R56612:56614 Imp <> AId constr
R56616:56616 Imp <> X def
prf 56787:56805 Himp ptwice_cequiv_pcopy
R56830:56833 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R56811:56816 Equiv Himp cequiv def
R56825:56829 Equiv Himp pcopy def
R56818:56823 Equiv Himp ptwice def
R56834:56834 Coq.Init.Logic <> :type_scope:'~'_x not
R56835:56840 Equiv Himp cequiv def
R56849:56853 Equiv Himp pcopy def
R56842:56847 Equiv Himp ptwice def
R56879:56881 Coq.Init.Logic <> not def
R56908:56910 Equiv Himp ::x_'/'_x_'||'_x not
R56922:56925 Equiv Himp ::x_'/'_x_'||'_x not
R56902:56907 Equiv Himp ptwice def
R56911:56921 Imp <> empty_state def
R56926:56931 Imp <> update def
R56958:56958 Imp <> Y def
R56934:56939 Imp <> update def
R56953:56953 Imp <> X def
R56941:56951 Imp <> empty_state def
R56908:56910 Equiv Himp ::x_'/'_x_'||'_x not
R56922:56925 Equiv Himp ::x_'/'_x_'||'_x not
R56902:56907 Equiv Himp ptwice def
R56911:56921 Imp <> empty_state def
R56926:56931 Imp <> update def
R56958:56958 Imp <> Y def
R56934:56939 Imp <> update def
R56953:56953 Imp <> X def
R56941:56951 Imp <> empty_state def
R56990:56995 Imp <> update def
R57009:57009 Imp <> X def
R56997:57007 Imp <> empty_state def
R56978:56982 Equiv Himp E_Seq constr
R57021:57027 Equiv Himp E_Havoc constr
R56990:56995 Imp <> update def
R57009:57009 Imp <> X def
R56997:57007 Imp <> empty_state def
R56978:56982 Equiv Himp E_Seq constr
R57021:57027 Equiv Himp E_Havoc constr
R57021:57027 Equiv Himp E_Havoc constr
R57045:57047 Equiv Himp ::x_'/'_x_'||'_x not
R57059:57062 Equiv Himp ::x_'/'_x_'||'_x not
R57040:57044 Equiv Himp pcopy def
R57048:57058 Imp <> empty_state def
R57063:57068 Imp <> update def
R57095:57095 Imp <> Y def
R57071:57076 Imp <> update def
R57090:57090 Imp <> X def
R57078:57088 Imp <> empty_state def
R57045:57047 Equiv Himp ::x_'/'_x_'||'_x not
R57059:57062 Equiv Himp ::x_'/'_x_'||'_x not
R57040:57044 Equiv Himp pcopy def
R57048:57058 Imp <> empty_state def
R57063:57068 Imp <> update def
R57095:57095 Imp <> Y def
R57071:57076 Imp <> update def
R57090:57090 Imp <> X def
R57078:57088 Imp <> empty_state def
R57175:57177 Coq.Init.Logic <> :type_scope:x_'='_x not
R57138:57143 Imp <> update def
R57174:57174 Imp <> X def
R57170:57170 Imp <> Y def
R57146:57151 Imp <> update def
R57165:57165 Imp <> X def
R57153:57163 Imp <> empty_state def
R57178:57183 Imp <> update def
R57214:57214 Imp <> Y def
R57210:57210 Imp <> Y def
R57186:57191 Imp <> update def
R57205:57205 Imp <> X def
R57193:57203 Imp <> empty_state def
R57175:57177 Coq.Init.Logic <> :type_scope:x_'='_x not
R57138:57143 Imp <> update def
R57174:57174 Imp <> X def
R57170:57170 Imp <> Y def
R57146:57151 Imp <> update def
R57165:57165 Imp <> X def
R57153:57163 Imp <> empty_state def
R57178:57183 Imp <> update def
R57214:57214 Imp <> Y def
R57210:57210 Imp <> Y def
R57186:57191 Imp <> update def
R57205:57205 Imp <> X def
R57193:57203 Imp <> empty_state def
R57272:57280 Imp <> update_eq thm
R57272:57280 Imp <> update_eq thm
R57289:57298 Imp <> update_neq thm
R57289:57298 Imp <> update_neq thm
R57310:57312 Coq.Init.Logic <> not def
def 58163:58164 Himp p1
R58168:58170 Equiv Himp com ind
R58177:58183 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R58211:58219 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R58262:58267 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R58184:58187 Imp <> BNot constr
R58190:58192 Imp <> BEq constr
R58203:58206 Imp <> ANum constr
R58195:58197 Imp <> AId constr
R58199:58199 Imp <> X def
R58227:58233 Equiv Himp ::x_';;'_x not
R58220:58225 Equiv Himp ::'HAVOC'_x not
R58226:58226 Imp <> Y def
R58235:58239 Equiv Himp ::x_'::='_x not
R58234:58234 Imp <> X def
R58240:58244 Imp <> APlus constr
R58255:58258 Imp <> ANum constr
R58247:58249 Imp <> AId constr
R58251:58251 Imp <> X def
def 58282:58283 Himp p2
R58287:58289 Equiv Himp com ind
R58296:58302 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R58330:58338 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R58343:58348 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R58303:58306 Imp <> BNot constr
R58309:58311 Imp <> BEq constr
R58322:58325 Imp <> ANum constr
R58314:58316 Imp <> AId constr
R58318:58318 Imp <> X def
R58339:58342 Equiv Himp ::'SKIP' not
prf 58606:58619 Himp p1_may_diverge
R58653:58654 Coq.Init.Logic <> :type_scope:'~'_x not
R58657:58659 Equiv Himp ::x_'/'_x_'||'_x not
R58662:58665 Equiv Himp ::x_'/'_x_'||'_x not
R58655:58656 Equiv Himp p1 def
R58660:58661 Equiv <> st var
R58666:58668 Equiv <> st' var
R58642:58645 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R58638:58639 Equiv <> st var
R58641:58641 Imp <> X def
prf 58714:58727 Himp p2_may_diverge
R58761:58762 Coq.Init.Logic <> :type_scope:'~'_x not
R58765:58767 Equiv Himp ::x_'/'_x_'||'_x not
R58770:58773 Equiv Himp ::x_'/'_x_'||'_x not
R58763:58764 Equiv Himp p2 def
R58768:58769 Equiv <> st var
R58774:58776 Equiv <> st' var
R58750:58753 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R58746:58747 Equiv <> st var
R58749:58749 Imp <> X def
prf 58913:58923 Himp p1_p2_equiv
R58927:58932 Equiv Himp cequiv def
R58937:58938 Equiv Himp p2 def
R58934:58935 Equiv Himp p1 def
def 59120:59121 Himp p3
R59125:59127 Equiv Himp com ind
R59146:59150 Equiv Himp ::x_';;'_x not
R59135:59139 Equiv Himp ::x_'::='_x not
R59134:59134 Imp <> Z def
R59140:59143 Imp <> ANum constr
R59151:59157 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R59185:59193 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R59215:59220 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R59158:59161 Imp <> BNot constr
R59164:59166 Imp <> BEq constr
R59177:59180 Imp <> ANum constr
R59169:59171 Imp <> AId constr
R59173:59173 Imp <> X def
R59201:59207 Equiv Himp ::x_';;'_x not
R59194:59199 Equiv Himp ::'HAVOC'_x not
R59200:59200 Imp <> X def
R59208:59213 Equiv Himp ::'HAVOC'_x not
R59214:59214 Imp <> Z def
def 59235:59236 Himp p4
R59240:59242 Equiv Himp com ind
R59263:59267 Equiv Himp ::x_';;'_x not
R59250:59255 Equiv Himp ::x_'::='_x not
R59262:59262 Equiv Himp ::x_'::='_x not
R59249:59249 Imp <> X def
R59256:59259 Imp <> ANum constr
R59269:59274 Equiv Himp ::x_'::='_x not
R59281:59281 Equiv Himp ::x_'::='_x not
R59268:59268 Imp <> Z def
R59275:59278 Imp <> ANum constr
prf 59294:59306 Himp p3_p4_inequiv
R59310:59311 Coq.Init.Logic <> :type_scope:'~'_x not
R59312:59317 Equiv Himp cequiv def
R59322:59323 Equiv Himp p4 def
R59319:59320 Equiv Himp p3 def
def 59450:59451 Himp p5
R59455:59457 Equiv Himp com ind
R59464:59470 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R59498:59506 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R59514:59519 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R59471:59474 Imp <> BNot constr
R59477:59479 Imp <> BEq constr
R59490:59493 Imp <> ANum constr
R59482:59484 Imp <> AId constr
R59486:59486 Imp <> X def
R59507:59512 Equiv Himp ::'HAVOC'_x not
R59513:59513 Imp <> X def
def 59534:59535 Himp p6
R59539:59541 Equiv Himp com ind
R59549:59553 Equiv Himp ::x_'::='_x not
R59548:59548 Imp <> X def
R59554:59557 Imp <> ANum constr
prf 59572:59582 Himp p5_p6_equiv
R59586:59591 Equiv Himp cequiv def
R59596:59597 Equiv Himp p6 def
R59593:59594 Equiv Himp p5 def
R59651:59654 Equiv <> <> mod
def 60508:60514 <> stequiv
R60527:60531 Imp <> state def
R60556:60557 SfLib <> id ind
R60566:60568 Coq.Init.Logic <> :type_scope:x_'='_x not
R60561:60563 Equiv <> st1 var
R60565:60565 Equiv <> X var
R60569:60571 Equiv <> st2 var
R60573:60573 Equiv <> X var
R60605:60611 Equiv <> stequiv def
not 60587 <> ::x_'~'_x
prf 60885:60896 <> stequiv_refl
R60913:60917 Imp <> state def
R60926:60928 Equiv <> ::x_'~'_x not
R60924:60925 Equiv <> st var
R60929:60930 Equiv <> st var
prf 61042:61052 <> stequiv_sym
R61074:61078 Imp <> state def
R61104:61106 Equiv <> ::x_'~'_x not
R61101:61103 Equiv <> st2 var
R61107:61109 Equiv <> st1 var
R61088:61090 Equiv <> ::x_'~'_x not
R61085:61087 Equiv <> st1 var
R61091:61093 Equiv <> st2 var
prf 61227:61239 <> stequiv_trans
R61265:61269 Imp <> state def
R61311:61313 Equiv <> ::x_'~'_x not
R61308:61310 Equiv <> st1 var
R61314:61316 Equiv <> st3 var
R61295:61297 Equiv <> ::x_'~'_x not
R61292:61294 Equiv <> st2 var
R61298:61300 Equiv <> st3 var
R61279:61281 Equiv <> ::x_'~'_x not
R61276:61278 Equiv <> st1 var
R61282:61284 Equiv <> st2 var
prf 61463:61476 <> stequiv_update
R61498:61502 Imp <> state def
R61534:61535 SfLib <> id ind
R61541:61543 Coq.Init.Datatypes <> nat ind
R61563:61565 Equiv <> ::x_'~'_x not
R61549:61554 Imp <> update def
R61562:61562 Equiv <> n var
R61560:61560 Equiv <> X var
R61556:61558 Equiv <> st1 var
R61566:61571 Imp <> update def
R61579:61579 Equiv <> n var
R61577:61577 Equiv <> X var
R61573:61575 Equiv <> st2 var
R61511:61513 Equiv <> ::x_'~'_x not
R61508:61510 Equiv <> st1 var
R61514:61516 Equiv <> st2 var
prf 61824:61836 <> stequiv_aeval
R61858:61862 Imp <> state def
R61894:61897 Imp <> aexp ind
R61912:61914 Coq.Init.Logic <> :type_scope:x_'='_x not
R61901:61905 Imp <> aeval def
R61911:61911 Equiv <> a var
R61907:61909 Equiv <> st1 var
R61915:61919 Imp <> aeval def
R61925:61925 Equiv <> a var
R61921:61923 Equiv <> st2 var
R61872:61874 Equiv <> ::x_'~'_x not
R61869:61871 Equiv <> st1 var
R61875:61877 Equiv <> st2 var
prf 62041:62053 <> stequiv_beval
R62075:62079 Imp <> state def
R62111:62114 Imp <> bexp ind
R62129:62131 Coq.Init.Logic <> :type_scope:x_'='_x not
R62118:62122 Imp <> beval def
R62128:62128 Equiv <> b var
R62124:62126 Equiv <> st1 var
R62132:62136 Imp <> beval def
R62142:62142 Equiv <> b var
R62138:62140 Equiv <> st2 var
R62089:62091 Equiv <> ::x_'~'_x not
R62086:62088 Equiv <> st1 var
R62092:62094 Equiv <> st2 var
prf 62372:62384 <> stequiv_ceval
R62405:62409 Imp <> state def
R62441:62443 Imp <> com ind
R62453:62457 Imp <> state def
R62490:62496 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R62509:62515 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R62549:62549 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R62504:62508 Imp <> state def
R62516:62516 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R62532:62537 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R62518:62520 Imp <> ::x_'/'_x_'||'_x not
R62524:62527 Imp <> ::x_'/'_x_'||'_x not
R62517:62517 Equiv <> c var
R62521:62523 Equiv <> st2 var
R62528:62531 Equiv <> st2' var
R62542:62544 Equiv <> ::x_'~'_x not
R62538:62541 Equiv <> st1' var
R62545:62548 Equiv <> st2' var
R62467:62469 Imp <> ::x_'/'_x_'||'_x not
R62473:62476 Imp <> ::x_'/'_x_'||'_x not
R62466:62466 Equiv <> c var
R62470:62472 Equiv <> st1 var
R62477:62480 Equiv <> st1' var
R62418:62420 Equiv <> ::x_'~'_x not
R62415:62417 Equiv <> st1 var
R62421:62423 Equiv <> st2 var
R62763:62768 Imp <> update def
R62763:62768 Imp <> update def
R62840:62852 Equiv <> stequiv_aeval prfax
R62840:62852 Equiv <> stequiv_aeval prfax
R62881:62894 Equiv <> stequiv_update prfax
R62881:62894 Equiv <> stequiv_update prfax
R63072:63076 Imp <> E_Seq constr
R63072:63076 Imp <> E_Seq constr
R63227:63234 Imp <> E_IfTrue constr
R63227:63234 Imp <> E_IfTrue constr
R63268:63280 Equiv <> stequiv_beval prfax
R63268:63280 Equiv <> stequiv_beval prfax
R63431:63439 Imp <> E_IfFalse constr
R63431:63439 Imp <> E_IfFalse constr
R63472:63484 Equiv <> stequiv_beval prfax
R63472:63484 Equiv <> stequiv_beval prfax
R63584:63593 Imp <> E_WhileEnd constr
R63584:63593 Imp <> E_WhileEnd constr
R63626:63638 Equiv <> stequiv_beval prfax
R63626:63638 Equiv <> stequiv_beval prfax
R63842:63852 Imp <> E_WhileLoop constr
R63842:63852 Imp <> E_WhileLoop constr
R63903:63915 Equiv <> stequiv_beval prfax
R63903:63915 Equiv <> stequiv_beval prfax
ind 64385:64390 <> ceval'
constr 64431:64437 <> E_equiv
R64410:64414 Imp <> state def
R64401:64405 Imp <> state def
R64394:64396 Imp <> com ind
R64559:64564 Equiv <> ceval' ind
R64508:64510 Equiv <> ::x_'/'_x_'||'''_x not
R64513:64517 Equiv <> ::x_'/'_x_'||'''_x not
R64507:64507 Equiv <> c var
R64511:64512 Equiv <> st var
R64518:64521 Equiv <> st'' var
R64492:64494 Equiv <> ::x_'~'_x not
R64489:64491 Equiv <> st' var
R64495:64498 Equiv <> st'' var
R64468:64470 Imp <> ::x_'/'_x_'||'_x not
R64473:64476 Imp <> ::x_'/'_x_'||'_x not
R64467:64467 Equiv <> c var
R64471:64472 Equiv <> st var
R64477:64479 Equiv <> st' var
R64559:64564 Equiv <> ceval' ind
not 64533 <> ::x_'/'_x_'||'''_x
def 64654:64660 <> cequiv'
R64671:64673 Imp <> com ind
R64705:64709 Imp <> state def
R64717:64717 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R64733:64739 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R64755:64755 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R64720:64722 Equiv <> ::x_'/'_x_'||'''_x not
R64725:64729 Equiv <> ::x_'/'_x_'||'''_x not
R64718:64719 Equiv <> c1 var
R64723:64724 Equiv <> st var
R64730:64732 Equiv <> st' var
R64742:64744 Equiv <> ::x_'/'_x_'||'''_x not
R64747:64751 Equiv <> ::x_'/'_x_'||'''_x not
R64740:64741 Equiv <> c2 var
R64745:64746 Equiv <> st var
R64752:64754 Equiv <> st' var
prf 64927:64941 <> cequiv__cequiv'
R64960:64962 Imp <> com ind
R64984:64990 Equiv <> cequiv' def
R64995:64996 Equiv <> c2 var
R64992:64993 Equiv <> c1 var
R64968:64973 Equiv <> cequiv def
R64978:64979 Equiv <> c2 var
R64975:64976 Equiv <> c1 var
R65016:65021 Equiv <> cequiv def
R65024:65030 Equiv <> cequiv' def
R65082:65088 Equiv <> E_equiv constr
R65082:65088 Equiv <> E_equiv constr
R65184:65190 Equiv <> E_equiv constr
R65184:65190 Equiv <> E_equiv constr
def 65414:65433 <> identity_assignment'
R65439:65445 Equiv <> cequiv' def
R65454:65458 Imp <> ::x_'::='_x not
R65453:65453 Imp <> X def
R65459:65461 Imp <> AId constr
R65463:65463 Imp <> X def
R65447:65450 Imp <> ::'SKIP' not
R65485:65491 Equiv <> cequiv' def
R65620:65625 Imp <> update def
R65640:65640 Imp <> X def
R65632:65632 Imp <> X def
R65606:65612 Equiv <> E_equiv constr
R65620:65625 Imp <> update def
R65640:65640 Imp <> X def
R65632:65632 Imp <> X def
R65606:65612 Equiv <> E_equiv constr
R65685:65697 Equiv <> stequiv_trans prfax
R65685:65697 Equiv <> stequiv_trans prfax
R65725:65731 Equiv <> stequiv def
R65748:65758 Imp <> update_same thm
R65748:65758 Imp <> update_same thm
prf 67135:67165 <> swap_noninterfering_assignments
R67269:67274 Equiv <> cequiv def
R67318:67320 Imp <> ::x_';;'_x not
R67311:67315 Imp <> ::x_'::='_x not
R67309:67310 Equiv <> l2 var
R67316:67317 Equiv <> a2 var
R67323:67327 Imp <> ::x_'::='_x not
R67321:67322 Equiv <> l1 var
R67328:67329 Equiv <> a1 var
R67290:67292 Imp <> ::x_';;'_x not
R67283:67287 Imp <> ::x_'::='_x not
R67281:67282 Equiv <> l1 var
R67288:67289 Equiv <> a1 var
R67295:67299 Imp <> ::x_'::='_x not
R67293:67294 Equiv <> l2 var
R67300:67301 Equiv <> a2 var
R67237:67256 Equiv <> var_not_used_in_aexp ind
R67261:67262 Equiv <> a1 var
R67258:67259 Equiv <> l2 var
R67205:67224 Equiv <> var_not_used_in_aexp ind
R67229:67230 Equiv <> a2 var
R67226:67227 Equiv <> l1 var
R67192:67195 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R67190:67191 Equiv <> l1 var
R67196:67197 Equiv <> l2 var
